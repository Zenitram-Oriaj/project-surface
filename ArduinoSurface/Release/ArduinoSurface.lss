
ArduinoSurface.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000018  00800100  00001384  00001418  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00001384  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          000000a2  00800118  00800118  00001430  2**0
                  ALLOC
  3 .stab         00009da4  00000000  00000000  00001430  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      0001728a  00000000  00000000  0000b1d4  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 00000080  00000000  00000000  00022460  2**3
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000304  00000000  00000000  000224e0  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000050  00000000  00000000  000227e4  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   0000018f  00000000  00000000  00022834  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	36 c1       	rjmp	.+620    	; 0x26e <__ctors_end>
       2:	00 00       	nop
       4:	50 c1       	rjmp	.+672    	; 0x2a6 <__bad_interrupt>
       6:	00 00       	nop
       8:	4e c1       	rjmp	.+668    	; 0x2a6 <__bad_interrupt>
       a:	00 00       	nop
       c:	4c c1       	rjmp	.+664    	; 0x2a6 <__bad_interrupt>
       e:	00 00       	nop
      10:	4a c1       	rjmp	.+660    	; 0x2a6 <__bad_interrupt>
      12:	00 00       	nop
      14:	48 c1       	rjmp	.+656    	; 0x2a6 <__bad_interrupt>
      16:	00 00       	nop
      18:	46 c1       	rjmp	.+652    	; 0x2a6 <__bad_interrupt>
      1a:	00 00       	nop
      1c:	44 c1       	rjmp	.+648    	; 0x2a6 <__bad_interrupt>
      1e:	00 00       	nop
      20:	42 c1       	rjmp	.+644    	; 0x2a6 <__bad_interrupt>
      22:	00 00       	nop
      24:	40 c1       	rjmp	.+640    	; 0x2a6 <__bad_interrupt>
      26:	00 00       	nop
      28:	3e c1       	rjmp	.+636    	; 0x2a6 <__bad_interrupt>
      2a:	00 00       	nop
      2c:	ac c3       	rjmp	.+1880   	; 0x786 <__vector_11>
      2e:	00 00       	nop
      30:	3a c1       	rjmp	.+628    	; 0x2a6 <__bad_interrupt>
      32:	00 00       	nop
      34:	38 c1       	rjmp	.+624    	; 0x2a6 <__bad_interrupt>
      36:	00 00       	nop
      38:	36 c1       	rjmp	.+620    	; 0x2a6 <__bad_interrupt>
      3a:	00 00       	nop
      3c:	34 c1       	rjmp	.+616    	; 0x2a6 <__bad_interrupt>
      3e:	00 00       	nop
      40:	32 c1       	rjmp	.+612    	; 0x2a6 <__bad_interrupt>
      42:	00 00       	nop
      44:	30 c1       	rjmp	.+608    	; 0x2a6 <__bad_interrupt>
      46:	00 00       	nop
      48:	2e c1       	rjmp	.+604    	; 0x2a6 <__bad_interrupt>
      4a:	00 00       	nop
      4c:	2c c1       	rjmp	.+600    	; 0x2a6 <__bad_interrupt>
      4e:	00 00       	nop
      50:	2a c1       	rjmp	.+596    	; 0x2a6 <__bad_interrupt>
      52:	00 00       	nop
      54:	28 c1       	rjmp	.+592    	; 0x2a6 <__bad_interrupt>
      56:	00 00       	nop
      58:	26 c1       	rjmp	.+588    	; 0x2a6 <__bad_interrupt>
      5a:	00 00       	nop
      5c:	0c 94 26 09 	jmp	0x124c	; 0x124c <__vector_23>
      60:	22 c1       	rjmp	.+580    	; 0x2a6 <__bad_interrupt>
      62:	00 00       	nop
      64:	20 c1       	rjmp	.+576    	; 0x2a6 <__bad_interrupt>
      66:	00 00       	nop
      68:	1e c1       	rjmp	.+572    	; 0x2a6 <__bad_interrupt>
      6a:	00 00       	nop
      6c:	1c c1       	rjmp	.+568    	; 0x2a6 <__bad_interrupt>
      6e:	00 00       	nop
      70:	1a c1       	rjmp	.+564    	; 0x2a6 <__bad_interrupt>
	...

00000074 <TouchBlob>:
      74:	fc 28 fe 84 40 cb 9a 87 0d be 57 3c b6 70 09 88     .(..@.....W<.p..
      84:	07 97 2d 2b e3 38 34 b6 6c ed b0 f7 e5 9c f6 c2     ..-+.84.l.......
      94:	2e 84 1b e8 b4 51 78 43 1f 28 4b 7c 2d 53 af fc     .....QxC.(K|-S..
      a4:	47 70 1b 59 6f 74 43 c4 f3 47 18 53 1a a2 a1 71     Gp.YotC..G.S...q
      b4:	c7 95 0e 31 55 21 d3 b5 1e e9 0c ba ec b8 89 19     ...1U!..........
      c4:	3e b3 af 75 81 9d 53 b9 41 57 f4 6d 39 25 29 7c     >..u..S.AW.m9%)|
      d4:	87 d9 b4 98 45 7d a7 26 9c 65 3b 85 68 89 d7 3b     ....E}.&.e;.h..;
      e4:	bd ff 14 67 f2 2b f0 2a 41 54 f0 fd 2c 66 7c f8     ...g.+.*AT..,f|.
      f4:	c0 8f 33 13 03 f1 d3 c1 0b 89 d9 1b 62 cd 51 b7     ..3.........b.Q.
     104:	80 b8 af 3a 10 c1 8a 5b e8 8a 56 f0 8c aa fa 35     ...:...[..V....5
     114:	e9 42 c4 d8 55 c3 38 cc 2b 53 5c 69 52 d5 c8 73     .B..U.8.+S\iR..s
     124:	02 38 7c 73 b6 41 e7 ff 05 d8 2b 79 9a e2 34 60     .8|s.A....+y..4`
     134:	8f a3 32 1f 09 78 62 bc 80 e3 0f bd 65 20 08 13     ..2..xb.....e ..
     144:	c1 e2 ee 53 2d 86 7e a7 5a c5 d3 7d 98 be 31 48     ...S-.~.Z..}..1H
     154:	1f fb da af a2 a8 6a 89 d6 bf f2 d3 32 2a 9a e4     ......j.....2*..
     164:	cf 17 b7 b8 f4 e1 33 08 24 8b c4 43 a5 e5 24 c2     ......3.$..C..$.

00000174 <ProductString>:
     174:	2c 03 50 00 72 00 6f 00 6a 00 65 00 63 00 74 00     ,.P.r.o.j.e.c.t.
     184:	20 00 53 00 75 00 72 00 66 00 61 00 63 00 65 00      .S.u.r.f.a.c.e.
     194:	20 00 54 00 6f 00 75 00 63 00 68 00 00 00            .T.o.u.c.h...

000001a2 <ManufacturerString>:
     1a2:	0c 03 53 00 68 00 61 00 77 00 6e 00 00 00           ..S.h.a.w.n...

000001b0 <LanguageString>:
     1b0:	04 03 09 04                                         ....

000001b4 <ConfigurationDescriptor>:
     1b4:	09 02 22 00 01 01 00 c0 64 09 04 00 00 01 03 00     ..".....d.......
     1c4:	00 00 09 21 11 01 00 01 22 85 00 07 05 81 03 0a     ...!....".......
     1d4:	00 0a                                               ..

000001d6 <DeviceDescriptor>:
     1d6:	12 01 10 01 00 00 00 08 eb 03 43 20 01 00 01 02     ..........C ....
     1e6:	00 01                                               ..

000001e8 <SurfaceReport>:
     1e8:	05 0d 09 04 a1 01 85 01 09 22 a1 02 09 42 15 00     ........."...B..
     1f8:	25 01 75 01 95 01 81 02 95 07 81 01 75 08 09 51     %.u.........u..Q
     208:	95 01 81 02 05 01 15 01 26 ff 7f 75 10 55 0f 65     ........&..u.U.e
     218:	11 09 30 35 00 46 20 03 95 01 81 02 46 e0 01 09     ..05.F .....F...
     228:	31 81 02 c0 05 0d 55 0c 66 01 10 47 ff ff 00 00     1.....U.f..G....
     238:	27 ff ff 00 00 75 10 95 01 09 56 81 02 09 54 25     '....u....V...T%
     248:	7f 95 01 75 08 81 02 85 07 09 55 95 01 25 0a b1     ...u......U..%..
     258:	02 85 44 06 00 ff 09 c5 15 00 26 ff 00 75 08 96     ..D.......&..u..
     268:	00 01 b1 02 c0 00                                   ......

0000026e <__ctors_end>:
     26e:	11 24       	eor	r1, r1
     270:	1f be       	out	0x3f, r1	; 63
     272:	cf ef       	ldi	r28, 0xFF	; 255
     274:	d2 e0       	ldi	r29, 0x02	; 2
     276:	de bf       	out	0x3e, r29	; 62
     278:	cd bf       	out	0x3d, r28	; 61

0000027a <__do_copy_data>:
     27a:	11 e0       	ldi	r17, 0x01	; 1
     27c:	a0 e0       	ldi	r26, 0x00	; 0
     27e:	b1 e0       	ldi	r27, 0x01	; 1
     280:	e4 e8       	ldi	r30, 0x84	; 132
     282:	f3 e1       	ldi	r31, 0x13	; 19
     284:	02 c0       	rjmp	.+4      	; 0x28a <__do_copy_data+0x10>
     286:	05 90       	lpm	r0, Z+
     288:	0d 92       	st	X+, r0
     28a:	a8 31       	cpi	r26, 0x18	; 24
     28c:	b1 07       	cpc	r27, r17
     28e:	d9 f7       	brne	.-10     	; 0x286 <__do_copy_data+0xc>

00000290 <__do_clear_bss>:
     290:	11 e0       	ldi	r17, 0x01	; 1
     292:	a8 e1       	ldi	r26, 0x18	; 24
     294:	b1 e0       	ldi	r27, 0x01	; 1
     296:	01 c0       	rjmp	.+2      	; 0x29a <.do_clear_bss_start>

00000298 <.do_clear_bss_loop>:
     298:	1d 92       	st	X+, r1

0000029a <.do_clear_bss_start>:
     29a:	aa 3b       	cpi	r26, 0xBA	; 186
     29c:	b1 07       	cpc	r27, r17
     29e:	e1 f7       	brne	.-8      	; 0x298 <.do_clear_bss_loop>
     2a0:	f2 d6       	rcall	.+3556   	; 0x1086 <main>
     2a2:	0c 94 c0 09 	jmp	0x1380	; 0x1380 <_exit>

000002a6 <__bad_interrupt>:
     2a6:	ac ce       	rjmp	.-680    	; 0x0 <__vectors>

000002a8 <Endpoint_Write_Stream_LE>:
#if defined(TEMPLATE_FUNC_NAME)

uint8_t TEMPLATE_FUNC_NAME (TEMPLATE_BUFFER_TYPE const Buffer,
                            uint16_t Length,
                            uint16_t* const BytesProcessed)
{
     2a8:	af 92       	push	r10
     2aa:	bf 92       	push	r11
     2ac:	cf 92       	push	r12
     2ae:	df 92       	push	r13
     2b0:	ef 92       	push	r14
     2b2:	ff 92       	push	r15
     2b4:	1f 93       	push	r17
     2b6:	cf 93       	push	r28
     2b8:	df 93       	push	r29
     2ba:	ec 01       	movw	r28, r24
     2bc:	7b 01       	movw	r14, r22
     2be:	6a 01       	movw	r12, r20
	uint8_t* DataStream      = ((uint8_t*)Buffer + TEMPLATE_BUFFER_OFFSET(Length));
	uint16_t BytesInTransfer = 0;
	uint8_t  ErrorCode;

	if ((ErrorCode = Endpoint_WaitUntilReady()))
     2c0:	e7 d1       	rcall	.+974    	; 0x690 <Endpoint_WaitUntilReady>
     2c2:	18 2f       	mov	r17, r24
     2c4:	88 23       	and	r24, r24
     2c6:	a9 f5       	brne	.+106    	; 0x332 <__stack+0x33>
     2c8:	c1 14       	cp	r12, r1
	  return ErrorCode;

	if (BytesProcessed != NULL)
     2ca:	d1 04       	cpc	r13, r1
     2cc:	39 f0       	breq	.+14     	; 0x2dc <Endpoint_Write_Stream_LE+0x34>
     2ce:	f6 01       	movw	r30, r12
	{
		Length -= *BytesProcessed;
     2d0:	20 81       	ld	r18, Z
     2d2:	31 81       	ldd	r19, Z+1	; 0x01
     2d4:	e2 1a       	sub	r14, r18
     2d6:	f3 0a       	sbc	r15, r19
     2d8:	c2 0f       	add	r28, r18
		TEMPLATE_BUFFER_MOVE(DataStream, *BytesProcessed);
     2da:	d3 1f       	adc	r29, r19
     2dc:	aa 24       	eor	r10, r10

uint8_t TEMPLATE_FUNC_NAME (TEMPLATE_BUFFER_TYPE const Buffer,
                            uint16_t Length,
                            uint16_t* const BytesProcessed)
{
	uint8_t* DataStream      = ((uint8_t*)Buffer + TEMPLATE_BUFFER_OFFSET(Length));
     2de:	bb 24       	eor	r11, r11
     2e0:	23 c0       	rjmp	.+70     	; 0x328 <__stack+0x29>
     2e2:	80 91 e8 00 	lds	r24, 0x00E8
     2e6:	85 fd       	sbrc	r24, 5
		TEMPLATE_BUFFER_MOVE(DataStream, *BytesProcessed);
	}

	while (Length)
	{
		if (!(Endpoint_IsReadWriteAllowed()))
     2e8:	16 c0       	rjmp	.+44     	; 0x316 <__stack+0x17>
     2ea:	80 91 e8 00 	lds	r24, 0x00E8
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
     2ee:	8e 77       	andi	r24, 0x7E	; 126
     2f0:	80 93 e8 00 	sts	0x00E8, r24
     2f4:	54 d4       	rcall	.+2216   	; 0xb9e <USB_USBTask>
		{
			TEMPLATE_CLEAR_ENDPOINT();

			#if !defined(INTERRUPT_CONTROL_ENDPOINT)
			USB_USBTask();
     2f6:	c1 14       	cp	r12, r1
     2f8:	d1 04       	cpc	r13, r1
			#endif

			if (BytesProcessed != NULL)
     2fa:	49 f0       	breq	.+18     	; 0x30e <__stack+0xf>
     2fc:	f6 01       	movw	r30, r12
     2fe:	80 81       	ld	r24, Z
			{
				*BytesProcessed += BytesInTransfer;
     300:	91 81       	ldd	r25, Z+1	; 0x01
     302:	8a 0d       	add	r24, r10
     304:	9b 1d       	adc	r25, r11
     306:	91 83       	std	Z+1, r25	; 0x01
     308:	80 83       	st	Z, r24
     30a:	15 e0       	ldi	r17, 0x05	; 5
     30c:	12 c0       	rjmp	.+36     	; 0x332 <__stack+0x33>
				return ENDPOINT_RWSTREAM_IncompleteTransfer;
     30e:	c0 d1       	rcall	.+896    	; 0x690 <Endpoint_WaitUntilReady>
     310:	88 23       	and	r24, r24
			}

			if ((ErrorCode = Endpoint_WaitUntilReady()))
     312:	51 f0       	breq	.+20     	; 0x328 <__stack+0x29>
     314:	0d c0       	rjmp	.+26     	; 0x330 <__stack+0x31>
     316:	89 91       	ld	r24, Y+
     318:	80 93 f1 00 	sts	0x00F1, r24
     31c:	08 94       	sec
     31e:	e1 08       	sbc	r14, r1
     320:	f1 08       	sbc	r15, r1
		}
		else
		{
			TEMPLATE_TRANSFER_BYTE(DataStream);
			TEMPLATE_BUFFER_MOVE(DataStream, 1);
			Length--;
     322:	08 94       	sec
     324:	a1 1c       	adc	r10, r1
     326:	b1 1c       	adc	r11, r1
			BytesInTransfer++;
     328:	e1 14       	cp	r14, r1
     32a:	f1 04       	cpc	r15, r1
     32c:	d1 f6       	brne	.-76     	; 0x2e2 <Endpoint_Write_Stream_LE+0x3a>
	{
		Length -= *BytesProcessed;
		TEMPLATE_BUFFER_MOVE(DataStream, *BytesProcessed);
	}

	while (Length)
     32e:	01 c0       	rjmp	.+2      	; 0x332 <__stack+0x33>
     330:	18 2f       	mov	r17, r24
     332:	81 2f       	mov	r24, r17
     334:	df 91       	pop	r29
			{
				*BytesProcessed += BytesInTransfer;
				return ENDPOINT_RWSTREAM_IncompleteTransfer;
			}

			if ((ErrorCode = Endpoint_WaitUntilReady()))
     336:	cf 91       	pop	r28
			BytesInTransfer++;
		}
	}

	return ENDPOINT_RWSTREAM_NoError;
}
     338:	1f 91       	pop	r17
     33a:	ff 90       	pop	r15
     33c:	ef 90       	pop	r14
     33e:	df 90       	pop	r13
     340:	cf 90       	pop	r12
     342:	bf 90       	pop	r11
     344:	af 90       	pop	r10
     346:	08 95       	ret

00000348 <Endpoint_Write_Control_Stream_LE>:
                            uint16_t Length)
{
	uint8_t* DataStream     = ((uint8_t*)Buffer + TEMPLATE_BUFFER_OFFSET(Length));
	bool     LastPacketFull = false;

	if (Length > USB_ControlRequest.wLength)
     348:	20 91 27 01 	lds	r18, 0x0127
     34c:	30 91 28 01 	lds	r19, 0x0128
     350:	26 17       	cp	r18, r22
     352:	37 07       	cpc	r19, r23
     354:	28 f4       	brcc	.+10     	; 0x360 <Endpoint_Write_Control_Stream_LE+0x18>
     356:	b9 01       	movw	r22, r18

		if (Endpoint_IsINReady())
		{
			uint16_t BytesInEndpoint = Endpoint_BytesInEndpoint();

			while (Length && (BytesInEndpoint < USB_Device_ControlEndpointSize))
     358:	58 2f       	mov	r21, r24
     35a:	49 2f       	mov	r20, r25
     35c:	20 e0       	ldi	r18, 0x00	; 0
     35e:	3f c0       	rjmp	.+126    	; 0x3de <Endpoint_Write_Control_Stream_LE+0x96>
	uint8_t* DataStream     = ((uint8_t*)Buffer + TEMPLATE_BUFFER_OFFSET(Length));
	bool     LastPacketFull = false;

	if (Length > USB_ControlRequest.wLength)
	  Length = USB_ControlRequest.wLength;
	else if (!(Length))
     360:	61 15       	cp	r22, r1
     362:	71 05       	cpc	r23, r1
     364:	c9 f7       	brne	.-14     	; 0x358 <Endpoint_Write_Control_Stream_LE+0x10>
     366:	20 91 e8 00 	lds	r18, 0x00E8
     36a:	2e 77       	andi	r18, 0x7E	; 126
     36c:	20 93 e8 00 	sts	0x00E8, r18
     370:	f3 cf       	rjmp	.-26     	; 0x358 <Endpoint_Write_Control_Stream_LE+0x10>
	  Endpoint_ClearIN();

	while (Length || LastPacketFull)
	{
		uint8_t USB_DeviceState_LCL = USB_DeviceState;
     372:	80 91 20 01 	lds	r24, 0x0120

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
     376:	88 23       	and	r24, r24
     378:	09 f4       	brne	.+2      	; 0x37c <Endpoint_Write_Control_Stream_LE+0x34>
     37a:	47 c0       	rjmp	.+142    	; 0x40a <Endpoint_Write_Control_Stream_LE+0xc2>
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
     37c:	85 30       	cpi	r24, 0x05	; 5
     37e:	09 f4       	brne	.+2      	; 0x382 <Endpoint_Write_Control_Stream_LE+0x3a>
     380:	40 c0       	rjmp	.+128    	; 0x402 <Endpoint_Write_Control_Stream_LE+0xba>
			 *  \return Boolean \c true if the selected endpoint has received a SETUP packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsSETUPReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsSETUPReceived(void)
			{
				return ((UEINTX & (1 << RXSTPI)) ? true : false);
     382:	80 91 e8 00 	lds	r24, 0x00E8
		  return ENDPOINT_RWCSTREAM_BusSuspended;
		else if (Endpoint_IsSETUPReceived())
     386:	83 fd       	sbrc	r24, 3
     388:	3e c0       	rjmp	.+124    	; 0x406 <Endpoint_Write_Control_Stream_LE+0xbe>
			 *  \return Boolean \c true if current endpoint is has received an OUT packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsOUTReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsOUTReceived(void)
			{
				return ((UEINTX & (1 << RXOUTI)) ? true : false);
     38a:	80 91 e8 00 	lds	r24, 0x00E8
		  return ENDPOINT_RWCSTREAM_HostAborted;
		else if (Endpoint_IsOUTReceived())
     38e:	82 fd       	sbrc	r24, 2
     390:	32 c0       	rjmp	.+100    	; 0x3f6 <Endpoint_Write_Control_Stream_LE+0xae>
			 *  \return Boolean \c true if the current endpoint is ready for an IN packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsINReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsINReady(void)
			{
				return ((UEINTX & (1 << TXINI)) ? true : false);
     392:	80 91 e8 00 	lds	r24, 0x00E8
		  break;

		if (Endpoint_IsINReady())
     396:	80 ff       	sbrs	r24, 0
     398:	22 c0       	rjmp	.+68     	; 0x3de <Endpoint_Write_Control_Stream_LE+0x96>
				#if (defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)) && !defined(__AVR_ATmega32U6__)
					return UEBCX;
				#elif defined(USB_SERIES_4_AVR) || defined(__AVR_ATmega32U6__)
					return (((uint16_t)UEBCHX << 8) | UEBCLX);
				#elif defined(USB_SERIES_2_AVR)
					return UEBCLX;
     39a:	20 91 f2 00 	lds	r18, 0x00F2
     39e:	30 e0       	ldi	r19, 0x00	; 0
		{
			uint16_t BytesInEndpoint = Endpoint_BytesInEndpoint();

			while (Length && (BytesInEndpoint < USB_Device_ControlEndpointSize))
     3a0:	e5 2f       	mov	r30, r21
     3a2:	f4 2f       	mov	r31, r20
  this software.
*/

#if defined(TEMPLATE_FUNC_NAME)

uint8_t TEMPLATE_FUNC_NAME (const void* const Buffer,
     3a4:	2e 1b       	sub	r18, r30
     3a6:	3f 0b       	sbc	r19, r31

		if (Endpoint_IsINReady())
		{
			uint16_t BytesInEndpoint = Endpoint_BytesInEndpoint();

			while (Length && (BytesInEndpoint < USB_Device_ControlEndpointSize))
     3a8:	05 c0       	rjmp	.+10     	; 0x3b4 <Endpoint_Write_Control_Stream_LE+0x6c>
			{
				TEMPLATE_TRANSFER_BYTE(DataStream);
     3aa:	81 91       	ld	r24, Z+
			 *  \param[in] Data  Data to write into the the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_8(const uint8_t Data) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_8(const uint8_t Data)
			{
				UEDATX = Data;
     3ac:	80 93 f1 00 	sts	0x00F1, r24
				TEMPLATE_BUFFER_MOVE(DataStream, 1);
				Length--;
     3b0:	61 50       	subi	r22, 0x01	; 1
     3b2:	70 40       	sbci	r23, 0x00	; 0
  this software.
*/

#if defined(TEMPLATE_FUNC_NAME)

uint8_t TEMPLATE_FUNC_NAME (const void* const Buffer,
     3b4:	cf 01       	movw	r24, r30
     3b6:	82 0f       	add	r24, r18
     3b8:	93 1f       	adc	r25, r19

		if (Endpoint_IsINReady())
		{
			uint16_t BytesInEndpoint = Endpoint_BytesInEndpoint();

			while (Length && (BytesInEndpoint < USB_Device_ControlEndpointSize))
     3ba:	61 15       	cp	r22, r1
     3bc:	71 05       	cpc	r23, r1
     3be:	19 f0       	breq	.+6      	; 0x3c6 <Endpoint_Write_Control_Stream_LE+0x7e>
     3c0:	88 30       	cpi	r24, 0x08	; 8
     3c2:	91 05       	cpc	r25, r1
     3c4:	90 f3       	brcs	.-28     	; 0x3aa <Endpoint_Write_Control_Stream_LE+0x62>
				TEMPLATE_BUFFER_MOVE(DataStream, 1);
				Length--;
				BytesInEndpoint++;
			}

			LastPacketFull = (BytesInEndpoint == USB_Device_ControlEndpointSize);
     3c6:	21 e0       	ldi	r18, 0x01	; 1
     3c8:	88 30       	cpi	r24, 0x08	; 8
     3ca:	91 05       	cpc	r25, r1
     3cc:	09 f0       	breq	.+2      	; 0x3d0 <Endpoint_Write_Control_Stream_LE+0x88>
     3ce:	20 e0       	ldi	r18, 0x00	; 0
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
     3d0:	80 91 e8 00 	lds	r24, 0x00E8
     3d4:	8e 77       	andi	r24, 0x7E	; 126
     3d6:	80 93 e8 00 	sts	0x00E8, r24
     3da:	5e 2f       	mov	r21, r30
     3dc:	4f 2f       	mov	r20, r31
	if (Length > USB_ControlRequest.wLength)
	  Length = USB_ControlRequest.wLength;
	else if (!(Length))
	  Endpoint_ClearIN();

	while (Length || LastPacketFull)
     3de:	61 15       	cp	r22, r1
     3e0:	71 05       	cpc	r23, r1
     3e2:	39 f6       	brne	.-114    	; 0x372 <Endpoint_Write_Control_Stream_LE+0x2a>
     3e4:	22 23       	and	r18, r18
     3e6:	29 f6       	brne	.-118    	; 0x372 <Endpoint_Write_Control_Stream_LE+0x2a>
     3e8:	06 c0       	rjmp	.+12     	; 0x3f6 <Endpoint_Write_Control_Stream_LE+0xae>
		}
	}

	while (!(Endpoint_IsOUTReceived()))
	{
		uint8_t USB_DeviceState_LCL = USB_DeviceState;
     3ea:	80 91 20 01 	lds	r24, 0x0120

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
     3ee:	88 23       	and	r24, r24
     3f0:	61 f0       	breq	.+24     	; 0x40a <Endpoint_Write_Control_Stream_LE+0xc2>
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
     3f2:	85 30       	cpi	r24, 0x05	; 5
     3f4:	61 f0       	breq	.+24     	; 0x40e <Endpoint_Write_Control_Stream_LE+0xc6>
			 *  \return Boolean \c true if current endpoint is has received an OUT packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsOUTReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsOUTReceived(void)
			{
				return ((UEINTX & (1 << RXOUTI)) ? true : false);
     3f6:	80 91 e8 00 	lds	r24, 0x00E8
			LastPacketFull = (BytesInEndpoint == USB_Device_ControlEndpointSize);
			Endpoint_ClearIN();
		}
	}

	while (!(Endpoint_IsOUTReceived()))
     3fa:	82 ff       	sbrs	r24, 2
     3fc:	f6 cf       	rjmp	.-20     	; 0x3ea <Endpoint_Write_Control_Stream_LE+0xa2>
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
		  return ENDPOINT_RWCSTREAM_BusSuspended;
	}

	return ENDPOINT_RWCSTREAM_NoError;
     3fe:	80 e0       	ldi	r24, 0x00	; 0
     400:	08 95       	ret
		uint8_t USB_DeviceState_LCL = USB_DeviceState;

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
		  return ENDPOINT_RWCSTREAM_BusSuspended;
     402:	83 e0       	ldi	r24, 0x03	; 3
     404:	08 95       	ret
		else if (Endpoint_IsSETUPReceived())
		  return ENDPOINT_RWCSTREAM_HostAborted;
     406:	81 e0       	ldi	r24, 0x01	; 1
     408:	08 95       	ret
	while (!(Endpoint_IsOUTReceived()))
	{
		uint8_t USB_DeviceState_LCL = USB_DeviceState;

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
     40a:	82 e0       	ldi	r24, 0x02	; 2
     40c:	08 95       	ret
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
		  return ENDPOINT_RWCSTREAM_BusSuspended;
     40e:	83 e0       	ldi	r24, 0x03	; 3
	}

	return ENDPOINT_RWCSTREAM_NoError;
}
     410:	08 95       	ret

00000412 <Endpoint_Read_Control_Stream_LE>:
uint8_t TEMPLATE_FUNC_NAME (void* const Buffer,
                            uint16_t Length)
{
	uint8_t* DataStream = ((uint8_t*)Buffer + TEMPLATE_BUFFER_OFFSET(Length));

	if (!(Length))
     412:	61 15       	cp	r22, r1
     414:	71 05       	cpc	r23, r1
     416:	29 f4       	brne	.+10     	; 0x422 <Endpoint_Read_Control_Stream_LE+0x10>
			 */
			static inline void Endpoint_ClearOUT(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearOUT(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << RXOUTI) | (1 << FIFOCON));
     418:	20 91 e8 00 	lds	r18, 0x00E8
     41c:	2b 77       	andi	r18, 0x7B	; 123
     41e:	20 93 e8 00 	sts	0x00E8, r18

#if defined(TEMPLATE_FUNC_NAME)

uint8_t TEMPLATE_FUNC_NAME (void* const Buffer,
                            uint16_t Length)
{
     422:	38 2f       	mov	r19, r24
     424:	29 2f       	mov	r18, r25
     426:	24 c0       	rjmp	.+72     	; 0x470 <Endpoint_Read_Control_Stream_LE+0x5e>
	if (!(Length))
	  Endpoint_ClearOUT();

	while (Length)
	{
		uint8_t USB_DeviceState_LCL = USB_DeviceState;
     428:	80 91 20 01 	lds	r24, 0x0120

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
     42c:	88 23       	and	r24, r24
     42e:	a1 f1       	breq	.+104    	; 0x498 <Endpoint_Read_Control_Stream_LE+0x86>
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
     430:	85 30       	cpi	r24, 0x05	; 5
     432:	71 f1       	breq	.+92     	; 0x490 <Endpoint_Read_Control_Stream_LE+0x7e>
			 *  \return Boolean \c true if the selected endpoint has received a SETUP packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsSETUPReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsSETUPReceived(void)
			{
				return ((UEINTX & (1 << RXSTPI)) ? true : false);
     434:	80 91 e8 00 	lds	r24, 0x00E8
		  return ENDPOINT_RWCSTREAM_BusSuspended;
		else if (Endpoint_IsSETUPReceived())
     438:	83 fd       	sbrc	r24, 3
     43a:	2c c0       	rjmp	.+88     	; 0x494 <Endpoint_Read_Control_Stream_LE+0x82>
			 *  \return Boolean \c true if current endpoint is has received an OUT packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsOUTReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsOUTReceived(void)
			{
				return ((UEINTX & (1 << RXOUTI)) ? true : false);
     43c:	80 91 e8 00 	lds	r24, 0x00E8
		  return ENDPOINT_RWCSTREAM_HostAborted;

		if (Endpoint_IsOUTReceived())
     440:	82 ff       	sbrs	r24, 2
     442:	f2 cf       	rjmp	.-28     	; 0x428 <Endpoint_Read_Control_Stream_LE+0x16>
     444:	e3 2f       	mov	r30, r19
     446:	f2 2f       	mov	r31, r18
     448:	08 c0       	rjmp	.+16     	; 0x45a <Endpoint_Read_Control_Stream_LE+0x48>
			 *  \return Next byte in the currently selected endpoint's FIFO buffer.
			 */
			static inline uint8_t Endpoint_Read_8(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_Read_8(void)
			{
				return UEDATX;
     44a:	80 91 f1 00 	lds	r24, 0x00F1
		{
			while (Length && Endpoint_BytesInEndpoint())
			{
				TEMPLATE_TRANSFER_BYTE(DataStream);
     44e:	81 93       	st	Z+, r24
				TEMPLATE_BUFFER_MOVE(DataStream, 1);
     450:	3e 2f       	mov	r19, r30
     452:	2f 2f       	mov	r18, r31
				Length--;
     454:	61 50       	subi	r22, 0x01	; 1
     456:	70 40       	sbci	r23, 0x00	; 0
		else if (Endpoint_IsSETUPReceived())
		  return ENDPOINT_RWCSTREAM_HostAborted;

		if (Endpoint_IsOUTReceived())
		{
			while (Length && Endpoint_BytesInEndpoint())
     458:	31 f0       	breq	.+12     	; 0x466 <Endpoint_Read_Control_Stream_LE+0x54>
     45a:	3e 2f       	mov	r19, r30
     45c:	2f 2f       	mov	r18, r31
				#if (defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)) && !defined(__AVR_ATmega32U6__)
					return UEBCX;
				#elif defined(USB_SERIES_4_AVR) || defined(__AVR_ATmega32U6__)
					return (((uint16_t)UEBCHX << 8) | UEBCLX);
				#elif defined(USB_SERIES_2_AVR)
					return UEBCLX;
     45e:	80 91 f2 00 	lds	r24, 0x00F2
     462:	88 23       	and	r24, r24
     464:	91 f7       	brne	.-28     	; 0x44a <Endpoint_Read_Control_Stream_LE+0x38>
			 */
			static inline void Endpoint_ClearOUT(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearOUT(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << RXOUTI) | (1 << FIFOCON));
     466:	80 91 e8 00 	lds	r24, 0x00E8
     46a:	8b 77       	andi	r24, 0x7B	; 123
     46c:	80 93 e8 00 	sts	0x00E8, r24
	uint8_t* DataStream = ((uint8_t*)Buffer + TEMPLATE_BUFFER_OFFSET(Length));

	if (!(Length))
	  Endpoint_ClearOUT();

	while (Length)
     470:	61 15       	cp	r22, r1
     472:	71 05       	cpc	r23, r1
     474:	c9 f6       	brne	.-78     	; 0x428 <Endpoint_Read_Control_Stream_LE+0x16>
     476:	06 c0       	rjmp	.+12     	; 0x484 <Endpoint_Read_Control_Stream_LE+0x72>
		}
	}

	while (!(Endpoint_IsINReady()))
	{
		uint8_t USB_DeviceState_LCL = USB_DeviceState;
     478:	80 91 20 01 	lds	r24, 0x0120

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
     47c:	88 23       	and	r24, r24
     47e:	61 f0       	breq	.+24     	; 0x498 <Endpoint_Read_Control_Stream_LE+0x86>
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
     480:	85 30       	cpi	r24, 0x05	; 5
     482:	61 f0       	breq	.+24     	; 0x49c <Endpoint_Read_Control_Stream_LE+0x8a>
			 *  \return Boolean \c true if the current endpoint is ready for an IN packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsINReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsINReady(void)
			{
				return ((UEINTX & (1 << TXINI)) ? true : false);
     484:	80 91 e8 00 	lds	r24, 0x00E8

			Endpoint_ClearOUT();
		}
	}

	while (!(Endpoint_IsINReady()))
     488:	80 ff       	sbrs	r24, 0
     48a:	f6 cf       	rjmp	.-20     	; 0x478 <Endpoint_Read_Control_Stream_LE+0x66>
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
		  return ENDPOINT_RWCSTREAM_BusSuspended;
	}

	return ENDPOINT_RWCSTREAM_NoError;
     48c:	80 e0       	ldi	r24, 0x00	; 0
     48e:	08 95       	ret
		uint8_t USB_DeviceState_LCL = USB_DeviceState;

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
		  return ENDPOINT_RWCSTREAM_BusSuspended;
     490:	83 e0       	ldi	r24, 0x03	; 3
     492:	08 95       	ret
		else if (Endpoint_IsSETUPReceived())
		  return ENDPOINT_RWCSTREAM_HostAborted;
     494:	81 e0       	ldi	r24, 0x01	; 1
     496:	08 95       	ret
	while (!(Endpoint_IsINReady()))
	{
		uint8_t USB_DeviceState_LCL = USB_DeviceState;

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
     498:	82 e0       	ldi	r24, 0x02	; 2
     49a:	08 95       	ret
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
		  return ENDPOINT_RWCSTREAM_BusSuspended;
     49c:	83 e0       	ldi	r24, 0x03	; 3
	}

	return ENDPOINT_RWCSTREAM_NoError;
}
     49e:	08 95       	ret

000004a0 <Endpoint_Write_Control_PStream_LE>:
                            uint16_t Length)
{
	uint8_t* DataStream     = ((uint8_t*)Buffer + TEMPLATE_BUFFER_OFFSET(Length));
	bool     LastPacketFull = false;

	if (Length > USB_ControlRequest.wLength)
     4a0:	20 91 27 01 	lds	r18, 0x0127
     4a4:	30 91 28 01 	lds	r19, 0x0128
     4a8:	26 17       	cp	r18, r22
     4aa:	37 07       	cpc	r19, r23
     4ac:	28 f4       	brcc	.+10     	; 0x4b8 <Endpoint_Write_Control_PStream_LE+0x18>
     4ae:	b9 01       	movw	r22, r18

		if (Endpoint_IsINReady())
		{
			uint16_t BytesInEndpoint = Endpoint_BytesInEndpoint();

			while (Length && (BytesInEndpoint < USB_Device_ControlEndpointSize))
     4b0:	58 2f       	mov	r21, r24
     4b2:	49 2f       	mov	r20, r25
     4b4:	20 e0       	ldi	r18, 0x00	; 0
     4b6:	40 c0       	rjmp	.+128    	; 0x538 <Endpoint_Write_Control_PStream_LE+0x98>
	uint8_t* DataStream     = ((uint8_t*)Buffer + TEMPLATE_BUFFER_OFFSET(Length));
	bool     LastPacketFull = false;

	if (Length > USB_ControlRequest.wLength)
	  Length = USB_ControlRequest.wLength;
	else if (!(Length))
     4b8:	61 15       	cp	r22, r1
     4ba:	71 05       	cpc	r23, r1
     4bc:	c9 f7       	brne	.-14     	; 0x4b0 <Endpoint_Write_Control_PStream_LE+0x10>
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
     4be:	20 91 e8 00 	lds	r18, 0x00E8
     4c2:	2e 77       	andi	r18, 0x7E	; 126
     4c4:	20 93 e8 00 	sts	0x00E8, r18
     4c8:	f3 cf       	rjmp	.-26     	; 0x4b0 <Endpoint_Write_Control_PStream_LE+0x10>
	  Endpoint_ClearIN();

	while (Length || LastPacketFull)
	{
		uint8_t USB_DeviceState_LCL = USB_DeviceState;
     4ca:	80 91 20 01 	lds	r24, 0x0120

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
     4ce:	88 23       	and	r24, r24
     4d0:	09 f4       	brne	.+2      	; 0x4d4 <Endpoint_Write_Control_PStream_LE+0x34>
     4d2:	48 c0       	rjmp	.+144    	; 0x564 <Endpoint_Write_Control_PStream_LE+0xc4>
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
     4d4:	85 30       	cpi	r24, 0x05	; 5
     4d6:	09 f4       	brne	.+2      	; 0x4da <Endpoint_Write_Control_PStream_LE+0x3a>
     4d8:	41 c0       	rjmp	.+130    	; 0x55c <Endpoint_Write_Control_PStream_LE+0xbc>
			 *  \return Boolean \c true if the selected endpoint has received a SETUP packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsSETUPReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsSETUPReceived(void)
			{
				return ((UEINTX & (1 << RXSTPI)) ? true : false);
     4da:	80 91 e8 00 	lds	r24, 0x00E8
		  return ENDPOINT_RWCSTREAM_BusSuspended;
		else if (Endpoint_IsSETUPReceived())
     4de:	83 fd       	sbrc	r24, 3
     4e0:	3f c0       	rjmp	.+126    	; 0x560 <Endpoint_Write_Control_PStream_LE+0xc0>
			 *  \return Boolean \c true if current endpoint is has received an OUT packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsOUTReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsOUTReceived(void)
			{
				return ((UEINTX & (1 << RXOUTI)) ? true : false);
     4e2:	80 91 e8 00 	lds	r24, 0x00E8
		  return ENDPOINT_RWCSTREAM_HostAborted;
		else if (Endpoint_IsOUTReceived())
     4e6:	82 fd       	sbrc	r24, 2
     4e8:	33 c0       	rjmp	.+102    	; 0x550 <Endpoint_Write_Control_PStream_LE+0xb0>
			 *  \return Boolean \c true if the current endpoint is ready for an IN packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsINReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsINReady(void)
			{
				return ((UEINTX & (1 << TXINI)) ? true : false);
     4ea:	80 91 e8 00 	lds	r24, 0x00E8
		  break;

		if (Endpoint_IsINReady())
     4ee:	80 ff       	sbrs	r24, 0
     4f0:	23 c0       	rjmp	.+70     	; 0x538 <Endpoint_Write_Control_PStream_LE+0x98>
				#if (defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)) && !defined(__AVR_ATmega32U6__)
					return UEBCX;
				#elif defined(USB_SERIES_4_AVR) || defined(__AVR_ATmega32U6__)
					return (((uint16_t)UEBCHX << 8) | UEBCLX);
				#elif defined(USB_SERIES_2_AVR)
					return UEBCLX;
     4f2:	20 91 f2 00 	lds	r18, 0x00F2
     4f6:	30 e0       	ldi	r19, 0x00	; 0
		{
			uint16_t BytesInEndpoint = Endpoint_BytesInEndpoint();

			while (Length && (BytesInEndpoint < USB_Device_ControlEndpointSize))
     4f8:	e5 2f       	mov	r30, r21
     4fa:	f4 2f       	mov	r31, r20
  this software.
*/

#if defined(TEMPLATE_FUNC_NAME)

uint8_t TEMPLATE_FUNC_NAME (const void* const Buffer,
     4fc:	2e 1b       	sub	r18, r30
     4fe:	3f 0b       	sbc	r19, r31

		if (Endpoint_IsINReady())
		{
			uint16_t BytesInEndpoint = Endpoint_BytesInEndpoint();

			while (Length && (BytesInEndpoint < USB_Device_ControlEndpointSize))
     500:	06 c0       	rjmp	.+12     	; 0x50e <Endpoint_Write_Control_PStream_LE+0x6e>
			{
				TEMPLATE_TRANSFER_BYTE(DataStream);
     502:	84 91       	lpm	r24, Z
			 *  \param[in] Data  Data to write into the the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_8(const uint8_t Data) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_8(const uint8_t Data)
			{
				UEDATX = Data;
     504:	80 93 f1 00 	sts	0x00F1, r24
				TEMPLATE_BUFFER_MOVE(DataStream, 1);
     508:	31 96       	adiw	r30, 0x01	; 1
				Length--;
     50a:	61 50       	subi	r22, 0x01	; 1
     50c:	70 40       	sbci	r23, 0x00	; 0
  this software.
*/

#if defined(TEMPLATE_FUNC_NAME)

uint8_t TEMPLATE_FUNC_NAME (const void* const Buffer,
     50e:	c9 01       	movw	r24, r18
     510:	8e 0f       	add	r24, r30
     512:	9f 1f       	adc	r25, r31

		if (Endpoint_IsINReady())
		{
			uint16_t BytesInEndpoint = Endpoint_BytesInEndpoint();

			while (Length && (BytesInEndpoint < USB_Device_ControlEndpointSize))
     514:	61 15       	cp	r22, r1
     516:	71 05       	cpc	r23, r1
     518:	19 f0       	breq	.+6      	; 0x520 <Endpoint_Write_Control_PStream_LE+0x80>
     51a:	88 30       	cpi	r24, 0x08	; 8
     51c:	91 05       	cpc	r25, r1
     51e:	88 f3       	brcs	.-30     	; 0x502 <Endpoint_Write_Control_PStream_LE+0x62>
				TEMPLATE_BUFFER_MOVE(DataStream, 1);
				Length--;
				BytesInEndpoint++;
			}

			LastPacketFull = (BytesInEndpoint == USB_Device_ControlEndpointSize);
     520:	21 e0       	ldi	r18, 0x01	; 1
     522:	88 30       	cpi	r24, 0x08	; 8
     524:	91 05       	cpc	r25, r1
     526:	09 f0       	breq	.+2      	; 0x52a <Endpoint_Write_Control_PStream_LE+0x8a>
     528:	20 e0       	ldi	r18, 0x00	; 0
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
     52a:	80 91 e8 00 	lds	r24, 0x00E8
     52e:	8e 77       	andi	r24, 0x7E	; 126
     530:	80 93 e8 00 	sts	0x00E8, r24
     534:	5e 2f       	mov	r21, r30
     536:	4f 2f       	mov	r20, r31
	if (Length > USB_ControlRequest.wLength)
	  Length = USB_ControlRequest.wLength;
	else if (!(Length))
	  Endpoint_ClearIN();

	while (Length || LastPacketFull)
     538:	61 15       	cp	r22, r1
     53a:	71 05       	cpc	r23, r1
     53c:	31 f6       	brne	.-116    	; 0x4ca <Endpoint_Write_Control_PStream_LE+0x2a>
     53e:	22 23       	and	r18, r18
     540:	21 f6       	brne	.-120    	; 0x4ca <Endpoint_Write_Control_PStream_LE+0x2a>
     542:	06 c0       	rjmp	.+12     	; 0x550 <Endpoint_Write_Control_PStream_LE+0xb0>
		}
	}

	while (!(Endpoint_IsOUTReceived()))
	{
		uint8_t USB_DeviceState_LCL = USB_DeviceState;
     544:	80 91 20 01 	lds	r24, 0x0120

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
     548:	88 23       	and	r24, r24
     54a:	61 f0       	breq	.+24     	; 0x564 <Endpoint_Write_Control_PStream_LE+0xc4>
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
     54c:	85 30       	cpi	r24, 0x05	; 5
     54e:	61 f0       	breq	.+24     	; 0x568 <Endpoint_Write_Control_PStream_LE+0xc8>
			 *  \return Boolean \c true if current endpoint is has received an OUT packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsOUTReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsOUTReceived(void)
			{
				return ((UEINTX & (1 << RXOUTI)) ? true : false);
     550:	80 91 e8 00 	lds	r24, 0x00E8
			LastPacketFull = (BytesInEndpoint == USB_Device_ControlEndpointSize);
			Endpoint_ClearIN();
		}
	}

	while (!(Endpoint_IsOUTReceived()))
     554:	82 ff       	sbrs	r24, 2
     556:	f6 cf       	rjmp	.-20     	; 0x544 <Endpoint_Write_Control_PStream_LE+0xa4>
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
		  return ENDPOINT_RWCSTREAM_BusSuspended;
	}

	return ENDPOINT_RWCSTREAM_NoError;
     558:	80 e0       	ldi	r24, 0x00	; 0
     55a:	08 95       	ret
		uint8_t USB_DeviceState_LCL = USB_DeviceState;

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
		  return ENDPOINT_RWCSTREAM_BusSuspended;
     55c:	83 e0       	ldi	r24, 0x03	; 3
     55e:	08 95       	ret
		else if (Endpoint_IsSETUPReceived())
		  return ENDPOINT_RWCSTREAM_HostAborted;
     560:	81 e0       	ldi	r24, 0x01	; 1
     562:	08 95       	ret
	while (!(Endpoint_IsOUTReceived()))
	{
		uint8_t USB_DeviceState_LCL = USB_DeviceState;

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
     564:	82 e0       	ldi	r24, 0x02	; 2
     566:	08 95       	ret
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
		  return ENDPOINT_RWCSTREAM_BusSuspended;
     568:	83 e0       	ldi	r24, 0x03	; 3
	}

	return ENDPOINT_RWCSTREAM_NoError;
}
     56a:	08 95       	ret

0000056c <Endpoint_ConfigureEndpoint_Prv>:
	UECFG0X = UECFG0XData;
	UECFG1X = UECFG1XData;

	return Endpoint_IsConfigured();
#else
	for (uint8_t EPNum = Number; EPNum < ENDPOINT_TOTAL_ENDPOINTS; EPNum++)
     56c:	98 2f       	mov	r25, r24
     56e:	2a c0       	rjmp	.+84     	; 0x5c4 <Endpoint_ConfigureEndpoint_Prv+0x58>
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
     570:	90 93 e9 00 	sts	0x00E9, r25
		uint8_t UECFG1XTemp;
		uint8_t UEIENXTemp;

		Endpoint_SelectEndpoint(EPNum);

		if (EPNum == Number)
     574:	98 17       	cp	r25, r24
     576:	39 f0       	breq	.+14     	; 0x586 <Endpoint_ConfigureEndpoint_Prv+0x1a>
			UECFG1XTemp = UECFG1XData;
			UEIENXTemp  = 0;
		}
		else
		{
			UECFG0XTemp = UECFG0X;
     578:	70 91 ec 00 	lds	r23, 0x00EC
			UECFG1XTemp = UECFG1X;
     57c:	20 91 ed 00 	lds	r18, 0x00ED
			UEIENXTemp  = UEIENX;
     580:	50 91 f0 00 	lds	r21, 0x00F0
     584:	03 c0       	rjmp	.+6      	; 0x58c <Endpoint_ConfigureEndpoint_Prv+0x20>
		Endpoint_SelectEndpoint(EPNum);

		if (EPNum == Number)
		{
			UECFG0XTemp = UECFG0XData;
			UECFG1XTemp = UECFG1XData;
     586:	24 2f       	mov	r18, r20

		Endpoint_SelectEndpoint(EPNum);

		if (EPNum == Number)
		{
			UECFG0XTemp = UECFG0XData;
     588:	76 2f       	mov	r23, r22
			UECFG1XTemp = UECFG1XData;
			UEIENXTemp  = 0;
     58a:	50 e0       	ldi	r21, 0x00	; 0
			UECFG0XTemp = UECFG0X;
			UECFG1XTemp = UECFG1X;
			UEIENXTemp  = UEIENX;
		}

		if (!(UECFG1XTemp & (1 << ALLOC)))
     58c:	21 ff       	sbrs	r18, 1
     58e:	19 c0       	rjmp	.+50     	; 0x5c2 <Endpoint_ConfigureEndpoint_Prv+0x56>
			 *  to and from a host.
			 */
			static inline void Endpoint_DisableEndpoint(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_DisableEndpoint(void)
			{
				UECONX &= ~(1 << EPEN);
     590:	30 91 eb 00 	lds	r19, 0x00EB
     594:	3e 7f       	andi	r19, 0xFE	; 254
     596:	30 93 eb 00 	sts	0x00EB, r19
		  continue;

		Endpoint_DisableEndpoint();
		UECFG1X &= ~(1 << ALLOC);
     59a:	30 91 ed 00 	lds	r19, 0x00ED
     59e:	3d 7f       	andi	r19, 0xFD	; 253
     5a0:	30 93 ed 00 	sts	0x00ED, r19
			 *  \note Endpoints must first be configured properly via \ref Endpoint_ConfigureEndpoint().
			 */
			static inline void Endpoint_EnableEndpoint(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_EnableEndpoint(void)
			{
				UECONX |= (1 << EPEN);
     5a4:	30 91 eb 00 	lds	r19, 0x00EB
     5a8:	31 60       	ori	r19, 0x01	; 1
     5aa:	30 93 eb 00 	sts	0x00EB, r19

		Endpoint_EnableEndpoint();
		UECFG0X = UECFG0XTemp;
     5ae:	70 93 ec 00 	sts	0x00EC, r23
		UECFG1X = UECFG1XTemp;
     5b2:	20 93 ed 00 	sts	0x00ED, r18
		UEIENX  = UEIENXTemp;
     5b6:	50 93 f0 00 	sts	0x00F0, r21
			 *  \return Boolean \c true if the currently selected endpoint has been configured, \c false otherwise.
			 */
			static inline bool Endpoint_IsConfigured(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsConfigured(void)
			{
				return ((UESTA0X & (1 << CFGOK)) ? true : false);
     5ba:	20 91 ee 00 	lds	r18, 0x00EE

		if (!(Endpoint_IsConfigured()))
     5be:	27 ff       	sbrs	r18, 7
     5c0:	08 c0       	rjmp	.+16     	; 0x5d2 <Endpoint_ConfigureEndpoint_Prv+0x66>
	UECFG0X = UECFG0XData;
	UECFG1X = UECFG1XData;

	return Endpoint_IsConfigured();
#else
	for (uint8_t EPNum = Number; EPNum < ENDPOINT_TOTAL_ENDPOINTS; EPNum++)
     5c2:	9f 5f       	subi	r25, 0xFF	; 255
     5c4:	95 30       	cpi	r25, 0x05	; 5
     5c6:	a0 f2       	brcs	.-88     	; 0x570 <Endpoint_ConfigureEndpoint_Prv+0x4>
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
     5c8:	8f 70       	andi	r24, 0x0F	; 15
     5ca:	80 93 e9 00 	sts	0x00E9, r24
		if (!(Endpoint_IsConfigured()))
		  return false;
	}

	Endpoint_SelectEndpoint(Number);
	return true;
     5ce:	81 e0       	ldi	r24, 0x01	; 1
     5d0:	08 95       	ret
		UECFG0X = UECFG0XTemp;
		UECFG1X = UECFG1XTemp;
		UEIENX  = UEIENXTemp;

		if (!(Endpoint_IsConfigured()))
		  return false;
     5d2:	80 e0       	ldi	r24, 0x00	; 0
	}

	Endpoint_SelectEndpoint(Number);
	return true;
#endif
}
     5d4:	08 95       	ret

000005d6 <Endpoint_ConfigureEndpointTable>:
uint8_t USB_Device_ControlEndpointSize = ENDPOINT_CONTROLEP_DEFAULT_SIZE;
#endif

bool Endpoint_ConfigureEndpointTable(const USB_Endpoint_Table_t* const Table,
                                     const uint8_t Entries)
{
     5d6:	0f 93       	push	r16
     5d8:	1f 93       	push	r17
     5da:	cf 93       	push	r28
     5dc:	df 93       	push	r29
     5de:	16 2f       	mov	r17, r22
	{
		if (!(Table[i].Address))
		  continue;
	
		if (!(Endpoint_ConfigureEndpoint(Table[i].Address, Table[i].Type, Table[i].Size, Table[i].Banks)))
		  return false;
     5e0:	ec 01       	movw	r28, r24
#endif

bool Endpoint_ConfigureEndpointTable(const USB_Endpoint_Table_t* const Table,
                                     const uint8_t Entries)
{
	for (uint8_t i = 0; i < Entries; i++)
     5e2:	00 e0       	ldi	r16, 0x00	; 0
     5e4:	2a c0       	rjmp	.+84     	; 0x63a <Endpoint_ConfigureEndpointTable+0x64>
	{
		if (!(Table[i].Address))
     5e6:	98 81       	ld	r25, Y
     5e8:	99 23       	and	r25, r25
     5ea:	29 f1       	breq	.+74     	; 0x636 <Endpoint_ConfigureEndpointTable+0x60>
		  continue;
	
		if (!(Endpoint_ConfigureEndpoint(Table[i].Address, Table[i].Type, Table[i].Size, Table[i].Banks)))
     5ec:	6b 81       	ldd	r22, Y+3	; 0x03
     5ee:	e9 81       	ldd	r30, Y+1	; 0x01
     5f0:	fa 81       	ldd	r31, Y+2	; 0x02
     5f2:	2c 81       	ldd	r18, Y+4	; 0x04
			static inline bool Endpoint_ConfigureEndpoint(const uint8_t Address,
			                                              const uint8_t Type,
			                                              const uint16_t Size,
			                                              const uint8_t Banks)
			{
				uint8_t Number = (Address & ENDPOINT_EPNUM_MASK);
     5f4:	89 2f       	mov	r24, r25
     5f6:	8f 70       	andi	r24, 0x0F	; 15
			
				if (Number >= ENDPOINT_TOTAL_ENDPOINTS)
     5f8:	85 30       	cpi	r24, 0x05	; 5
     5fa:	18 f5       	brcc	.+70     	; 0x642 <Endpoint_ConfigureEndpointTable+0x6c>
				  return false;
			
				return Endpoint_ConfigureEndpoint_Prv(Number,
				                                      ((Type << EPTYPE0) | ((Address & ENDPOINT_DIR_IN) ? (1 << EPDIR) : 0)),
     5fc:	62 95       	swap	r22
     5fe:	66 0f       	add	r22, r22
     600:	66 0f       	add	r22, r22
     602:	60 7c       	andi	r22, 0xC0	; 192
     604:	99 1f       	adc	r25, r25
     606:	99 27       	eor	r25, r25
     608:	99 1f       	adc	r25, r25
				uint8_t Number = (Address & ENDPOINT_EPNUM_MASK);
			
				if (Number >= ENDPOINT_TOTAL_ENDPOINTS)
				  return false;
			
				return Endpoint_ConfigureEndpoint_Prv(Number,
     60a:	69 2b       	or	r22, r25
     60c:	22 30       	cpi	r18, 0x02	; 2
     60e:	10 f0       	brcs	.+4      	; 0x614 <Endpoint_ConfigureEndpointTable+0x3e>
     610:	96 e0       	ldi	r25, 0x06	; 6
     612:	01 c0       	rjmp	.+2      	; 0x616 <Endpoint_ConfigureEndpointTable+0x40>
     614:	92 e0       	ldi	r25, 0x02	; 2
			static inline uint8_t Endpoint_BytesToEPSizeMask(const uint16_t Bytes) ATTR_WARN_UNUSED_RESULT ATTR_CONST
			                                                                       ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_BytesToEPSizeMask(const uint16_t Bytes)
			{
				uint8_t  MaskVal    = 0;
				uint16_t CheckBytes = 8;
     616:	28 e0       	ldi	r18, 0x08	; 8
     618:	30 e0       	ldi	r19, 0x00	; 0
		/* Inline Functions: */
			static inline uint8_t Endpoint_BytesToEPSizeMask(const uint16_t Bytes) ATTR_WARN_UNUSED_RESULT ATTR_CONST
			                                                                       ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_BytesToEPSizeMask(const uint16_t Bytes)
			{
				uint8_t  MaskVal    = 0;
     61a:	40 e0       	ldi	r20, 0x00	; 0
     61c:	03 c0       	rjmp	.+6      	; 0x624 <Endpoint_ConfigureEndpointTable+0x4e>
				uint16_t CheckBytes = 8;

				while (CheckBytes < Bytes)
				{
					MaskVal++;
     61e:	4f 5f       	subi	r20, 0xFF	; 255
					CheckBytes <<= 1;
     620:	22 0f       	add	r18, r18
     622:	33 1f       	adc	r19, r19
			static inline uint8_t Endpoint_BytesToEPSizeMask(const uint16_t Bytes)
			{
				uint8_t  MaskVal    = 0;
				uint16_t CheckBytes = 8;

				while (CheckBytes < Bytes)
     624:	2e 17       	cp	r18, r30
     626:	3f 07       	cpc	r19, r31
     628:	d0 f3       	brcs	.-12     	; 0x61e <Endpoint_ConfigureEndpointTable+0x48>
				{
					MaskVal++;
					CheckBytes <<= 1;
				}

				return (MaskVal << EPSIZE0);
     62a:	42 95       	swap	r20
     62c:	40 7f       	andi	r20, 0xF0	; 240
				uint8_t Number = (Address & ENDPOINT_EPNUM_MASK);
			
				if (Number >= ENDPOINT_TOTAL_ENDPOINTS)
				  return false;
			
				return Endpoint_ConfigureEndpoint_Prv(Number,
     62e:	49 2b       	or	r20, r25
     630:	9d df       	rcall	.-198    	; 0x56c <Endpoint_ConfigureEndpoint_Prv>
     632:	88 23       	and	r24, r24
     634:	31 f0       	breq	.+12     	; 0x642 <Endpoint_ConfigureEndpointTable+0x6c>
     636:	0f 5f       	subi	r16, 0xFF	; 255
#endif

bool Endpoint_ConfigureEndpointTable(const USB_Endpoint_Table_t* const Table,
                                     const uint8_t Entries)
{
	for (uint8_t i = 0; i < Entries; i++)
     638:	25 96       	adiw	r28, 0x05	; 5
     63a:	01 17       	cp	r16, r17
     63c:	a1 f6       	brne	.-88     	; 0x5e6 <Endpoint_ConfigureEndpointTable+0x10>
     63e:	81 e0       	ldi	r24, 0x01	; 1
	
		if (!(Endpoint_ConfigureEndpoint(Table[i].Address, Table[i].Type, Table[i].Size, Table[i].Banks)))
		  return false;
	}
	
	return true;
     640:	01 c0       	rjmp	.+2      	; 0x644 <Endpoint_ConfigureEndpointTable+0x6e>
     642:	80 e0       	ldi	r24, 0x00	; 0
	{
		if (!(Table[i].Address))
		  continue;
	
		if (!(Endpoint_ConfigureEndpoint(Table[i].Address, Table[i].Type, Table[i].Size, Table[i].Banks)))
		  return false;
     644:	df 91       	pop	r29
	}
	
	return true;
}
     646:	cf 91       	pop	r28
     648:	1f 91       	pop	r17
     64a:	0f 91       	pop	r16
     64c:	08 95       	ret

0000064e <Endpoint_ClearStatusStage>:
	}
}

void Endpoint_ClearStatusStage(void)
{
	if (USB_ControlRequest.bmRequestType & REQDIR_DEVICETOHOST)
     64e:	80 91 21 01 	lds	r24, 0x0121
     652:	87 ff       	sbrs	r24, 7
     654:	13 c0       	rjmp	.+38     	; 0x67c <Endpoint_ClearStatusStage+0x2e>
     656:	04 c0       	rjmp	.+8      	; 0x660 <Endpoint_ClearStatusStage+0x12>
	{
		while (!(Endpoint_IsOUTReceived()))
		{
			if (USB_DeviceState == DEVICE_STATE_Unattached)
     658:	80 91 20 01 	lds	r24, 0x0120
     65c:	88 23       	and	r24, r24
     65e:	b9 f0       	breq	.+46     	; 0x68e <Endpoint_ClearStatusStage+0x40>
			 *  \return Boolean \c true if current endpoint is has received an OUT packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsOUTReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsOUTReceived(void)
			{
				return ((UEINTX & (1 << RXOUTI)) ? true : false);
     660:	80 91 e8 00 	lds	r24, 0x00E8

void Endpoint_ClearStatusStage(void)
{
	if (USB_ControlRequest.bmRequestType & REQDIR_DEVICETOHOST)
	{
		while (!(Endpoint_IsOUTReceived()))
     664:	82 ff       	sbrs	r24, 2
     666:	f8 cf       	rjmp	.-16     	; 0x658 <Endpoint_ClearStatusStage+0xa>
			 */
			static inline void Endpoint_ClearOUT(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearOUT(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << RXOUTI) | (1 << FIFOCON));
     668:	80 91 e8 00 	lds	r24, 0x00E8
     66c:	8b 77       	andi	r24, 0x7B	; 123
     66e:	80 93 e8 00 	sts	0x00E8, r24
     672:	08 95       	ret
	}
	else
	{
		while (!(Endpoint_IsINReady()))
		{
			if (USB_DeviceState == DEVICE_STATE_Unattached)
     674:	80 91 20 01 	lds	r24, 0x0120
     678:	88 23       	and	r24, r24
     67a:	49 f0       	breq	.+18     	; 0x68e <Endpoint_ClearStatusStage+0x40>
			 *  \return Boolean \c true if the current endpoint is ready for an IN packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsINReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsINReady(void)
			{
				return ((UEINTX & (1 << TXINI)) ? true : false);
     67c:	80 91 e8 00 	lds	r24, 0x00E8

		Endpoint_ClearOUT();
	}
	else
	{
		while (!(Endpoint_IsINReady()))
     680:	80 ff       	sbrs	r24, 0
     682:	f8 cf       	rjmp	.-16     	; 0x674 <Endpoint_ClearStatusStage+0x26>
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
     684:	80 91 e8 00 	lds	r24, 0x00E8
     688:	8e 77       	andi	r24, 0x7E	; 126
     68a:	80 93 e8 00 	sts	0x00E8, r24
     68e:	08 95       	ret

00000690 <Endpoint_WaitUntilReady>:
			 *  \return Current USB frame number from the USB controller.
			 */
			static inline uint16_t USB_Device_GetFrameNumber(void) ATTR_ALWAYS_INLINE ATTR_WARN_UNUSED_RESULT;
			static inline uint16_t USB_Device_GetFrameNumber(void)
			{
				return UDFNUM;
     690:	80 91 e4 00 	lds	r24, 0x00E4
     694:	90 91 e5 00 	lds	r25, 0x00E5
     698:	45 e6       	ldi	r20, 0x65	; 101
     69a:	01 c0       	rjmp	.+2      	; 0x69e <Endpoint_WaitUntilReady+0xe>
     69c:	c9 01       	movw	r24, r18
			 *  \return The currently selected endpoint's direction, as a \c ENDPOINT_DIR_* mask.
			 */
			static inline uint8_t Endpoint_GetEndpointDirection(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_GetEndpointDirection(void)
			{
				return (UECFG0X & (1 << EPDIR)) ? ENDPOINT_DIR_IN : ENDPOINT_DIR_OUT;
     69e:	20 91 ec 00 	lds	r18, 0x00EC
     6a2:	20 ff       	sbrs	r18, 0
     6a4:	23 c0       	rjmp	.+70     	; 0x6ec <Endpoint_WaitUntilReady+0x5c>
			 *  \return Boolean \c true if the current endpoint is ready for an IN packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsINReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsINReady(void)
			{
				return ((UEINTX & (1 << TXINI)) ? true : false);
     6a6:	20 91 e8 00 	lds	r18, 0x00E8

	for (;;)
	{
		if (Endpoint_GetEndpointDirection() == ENDPOINT_DIR_IN)
		{
			if (Endpoint_IsINReady())
     6aa:	20 fd       	sbrc	r18, 0
     6ac:	15 c0       	rjmp	.+42     	; 0x6d8 <Endpoint_WaitUntilReady+0x48>
		{
			if (Endpoint_IsOUTReceived())
			  return ENDPOINT_READYWAIT_NoError;
		}

		uint8_t USB_DeviceState_LCL = USB_DeviceState;
     6ae:	20 91 20 01 	lds	r18, 0x0120

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
     6b2:	22 23       	and	r18, r18
     6b4:	99 f0       	breq	.+38     	; 0x6dc <Endpoint_WaitUntilReady+0x4c>
		  return ENDPOINT_READYWAIT_DeviceDisconnected;
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
     6b6:	25 30       	cpi	r18, 0x05	; 5
     6b8:	99 f0       	breq	.+38     	; 0x6e0 <Endpoint_WaitUntilReady+0x50>
			 *  \return Boolean \c true if the currently selected endpoint is stalled, \c false otherwise.
			 */
			static inline bool Endpoint_IsStalled(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsStalled(void)
			{
				return ((UECONX & (1 << STALLRQ)) ? true : false);
     6ba:	20 91 eb 00 	lds	r18, 0x00EB
		  return ENDPOINT_READYWAIT_BusSuspended;
		else if (Endpoint_IsStalled())
     6be:	25 fd       	sbrc	r18, 5
     6c0:	11 c0       	rjmp	.+34     	; 0x6e4 <Endpoint_WaitUntilReady+0x54>
     6c2:	20 91 e4 00 	lds	r18, 0x00E4
     6c6:	30 91 e5 00 	lds	r19, 0x00E5
		  return ENDPOINT_READYWAIT_EndpointStalled;

		uint16_t CurrentFrameNumber = USB_Device_GetFrameNumber();

		if (CurrentFrameNumber != PreviousFrameNumber)
     6ca:	28 17       	cp	r18, r24
     6cc:	39 07       	cpc	r19, r25
     6ce:	39 f3       	breq	.-50     	; 0x69e <Endpoint_WaitUntilReady+0xe>
     6d0:	41 50       	subi	r20, 0x01	; 1
		{
			PreviousFrameNumber = CurrentFrameNumber;

			if (!(TimeoutMSRem--))
     6d2:	21 f7       	brne	.-56     	; 0x69c <Endpoint_WaitUntilReady+0xc>
			  return ENDPOINT_READYWAIT_Timeout;
     6d4:	84 e0       	ldi	r24, 0x04	; 4
     6d6:	08 95       	ret
	for (;;)
	{
		if (Endpoint_GetEndpointDirection() == ENDPOINT_DIR_IN)
		{
			if (Endpoint_IsINReady())
			  return ENDPOINT_READYWAIT_NoError;
     6d8:	80 e0       	ldi	r24, 0x00	; 0
     6da:	08 95       	ret
		}

		uint8_t USB_DeviceState_LCL = USB_DeviceState;

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
		  return ENDPOINT_READYWAIT_DeviceDisconnected;
     6dc:	82 e0       	ldi	r24, 0x02	; 2
     6de:	08 95       	ret
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
		  return ENDPOINT_READYWAIT_BusSuspended;
     6e0:	83 e0       	ldi	r24, 0x03	; 3
     6e2:	08 95       	ret
		else if (Endpoint_IsStalled())
		  return ENDPOINT_READYWAIT_EndpointStalled;
     6e4:	81 e0       	ldi	r24, 0x01	; 1
     6e6:	08 95       	ret
			  return ENDPOINT_READYWAIT_NoError;
		}
		else
		{
			if (Endpoint_IsOUTReceived())
			  return ENDPOINT_READYWAIT_NoError;
     6e8:	80 e0       	ldi	r24, 0x00	; 0

			if (!(TimeoutMSRem--))
			  return ENDPOINT_READYWAIT_Timeout;
		}
	}
}
     6ea:	08 95       	ret
			 *  \return Boolean \c true if current endpoint is has received an OUT packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsOUTReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsOUTReceived(void)
			{
				return ((UEINTX & (1 << RXOUTI)) ? true : false);
     6ec:	20 91 e8 00 	lds	r18, 0x00E8
			if (Endpoint_IsINReady())
			  return ENDPOINT_READYWAIT_NoError;
		}
		else
		{
			if (Endpoint_IsOUTReceived())
     6f0:	22 ff       	sbrs	r18, 2
     6f2:	dd cf       	rjmp	.-70     	; 0x6ae <Endpoint_WaitUntilReady+0x1e>
     6f4:	f9 cf       	rjmp	.-14     	; 0x6e8 <Endpoint_WaitUntilReady+0x58>

000006f6 <USB_ResetInterface>:
{
	#if defined(USB_CAN_BE_BOTH)
	bool UIDModeSelectEnabled = ((UHWCON & (1 << UIDE)) != 0);
	#endif

	USB_INT_DisableAllInterrupts();
     6f6:	41 d0       	rcall	.+130    	; 0x77a <USB_INT_DisableAllInterrupts>
     6f8:	43 d0       	rcall	.+134    	; 0x780 <USB_INT_ClearAllInterrupts>
     6fa:	80 91 d8 00 	lds	r24, 0x00D8
			}

			static inline void USB_Controller_Reset(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Controller_Reset(void)
			{
				USBCON &= ~(1 << USBE);
     6fe:	8f 77       	andi	r24, 0x7F	; 127
     700:	80 93 d8 00 	sts	0x00D8, r24
     704:	80 91 d8 00 	lds	r24, 0x00D8
				USBCON |=  (1 << USBE);
     708:	80 68       	ori	r24, 0x80	; 128
     70a:	80 93 d8 00 	sts	0x00D8, r24
     70e:	80 91 d8 00 	lds	r24, 0x00D8
			}

			static inline void USB_CLK_Unfreeze(void) ATTR_ALWAYS_INLINE;
			static inline void USB_CLK_Unfreeze(void)
			{
				USBCON &= ~(1 << FRZCLK);
     712:	8f 7d       	andi	r24, 0xDF	; 223
     714:	80 93 d8 00 	sts	0x00D8, r24
     718:	84 e0       	ldi	r24, 0x04	; 4
     71a:	89 bd       	out	0x29, r24	; 41

		/* Inline Functions: */
			static inline void USB_PLL_On(void) ATTR_ALWAYS_INLINE;
			static inline void USB_PLL_On(void)
			{
				PLLCSR = USB_PLL_PSC;
     71c:	86 e0       	ldi	r24, 0x06	; 6
     71e:	89 bd       	out	0x29, r24	; 41
     720:	09 b4       	in	r0, 0x29	; 41
     722:	00 fe       	sbrs	r0, 0

		if (!(USB_Options & USB_OPT_MANUAL_PLL))
		{
			#if defined(USB_SERIES_2_AVR)
			USB_PLL_On();
			while (!(USB_PLL_IsReady()));
     724:	fd cf       	rjmp	.-6      	; 0x720 <USB_ResetInterface+0x2a>
     726:	10 92 20 01 	sts	0x0120, r1
}

#if defined(USB_CAN_BE_DEVICE)
static void USB_Init_Device(void)
{
	USB_DeviceState                 = DEVICE_STATE_Unattached;
     72a:	10 92 1c 01 	sts	0x011C, r1
	USB_Device_ConfigurationNumber  = 0;
     72e:	10 92 1e 01 	sts	0x011E, r1

	#if !defined(NO_DEVICE_REMOTE_WAKEUP)
	USB_Device_RemoteWakeupEnabled  = false;
     732:	10 92 1d 01 	sts	0x011D, r1
     736:	80 e0       	ldi	r24, 0x00	; 0
     738:	60 e0       	ldi	r22, 0x00	; 0
				uint8_t Number = (Address & ENDPOINT_EPNUM_MASK);
			
				if (Number >= ENDPOINT_TOTAL_ENDPOINTS)
				  return false;
			
				return Endpoint_ConfigureEndpoint_Prv(Number,
     73a:	42 e0       	ldi	r20, 0x02	; 2
     73c:	17 df       	rcall	.-466    	; 0x56c <Endpoint_ConfigureEndpoint_Prv>
     73e:	80 91 e1 00 	lds	r24, 0x00E1
     742:	8e 7f       	andi	r24, 0xFE	; 254
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDINT  &= ~(1 << WAKEUPI);
						break;
					case USB_INT_SUSPI:
						UDINT  &= ~(1 << SUSPI);
     744:	80 93 e1 00 	sts	0x00E1, r24
     748:	80 91 e2 00 	lds	r24, 0x00E2
     74c:	81 60       	ori	r24, 0x01	; 1
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDIEN  |= (1 << WAKEUPE);
						break;
					case USB_INT_SUSPI:
						UDIEN  |= (1 << SUSPE);
     74e:	80 93 e2 00 	sts	0x00E2, r24
     752:	80 91 e2 00 	lds	r24, 0x00E2
     756:	88 60       	ori	r24, 0x08	; 8
						break;
					case USB_INT_EORSTI:
						UDIEN  |= (1 << EORSTE);
     758:	80 93 e2 00 	sts	0x00E2, r24
     75c:	80 91 e0 00 	lds	r24, 0x00E0
     760:	8e 7f       	andi	r24, 0xFE	; 254
			 *  register and despite the datasheet making no mention of its requirement in host mode.
			 */
			static inline void USB_Attach(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Attach(void)
			{
				UDCON  &= ~(1 << DETACH);
     762:	80 93 e0 00 	sts	0x00E0, r24
     766:	08 95       	ret

00000768 <USB_Init>:
			static inline void USB_REG_On(void)
			{
			#if defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
				UHWCON |=  (1 << UVREGE);
			#else
				REGCR  &= ~(1 << REGDIS);
     768:	e3 e6       	ldi	r30, 0x63	; 99
     76a:	f0 e0       	ldi	r31, 0x00	; 0
     76c:	80 81       	ld	r24, Z
     76e:	8e 7f       	andi	r24, 0xFE	; 254
     770:	80 83       	st	Z, r24
		UHWCON &= ~(1 << UIDE);
		USB_CurrentMode = Mode;
	}
	#endif

	USB_IsInitialized = true;
     772:	81 e0       	ldi	r24, 0x01	; 1
     774:	80 93 1f 01 	sts	0x011F, r24

	USB_ResetInterface();
     778:	be cf       	rjmp	.-132    	; 0x6f6 <USB_ResetInterface>

0000077a <USB_INT_DisableAllInterrupts>:
	#if defined(USB_CAN_BE_HOST)
	UHIEN   = 0;
	#endif

	#if defined(USB_CAN_BE_DEVICE)
	UDIEN   = 0;
     77a:	10 92 e2 00 	sts	0x00E2, r1
	#endif
}
     77e:	08 95       	ret

00000780 <USB_INT_ClearAllInterrupts>:
	#if defined(USB_CAN_BE_HOST)
	UHINT  = 0;
	#endif

	#if defined(USB_CAN_BE_DEVICE)
	UDINT  = 0;
     780:	10 92 e1 00 	sts	0x00E1, r1
	#endif
}
     784:	08 95       	ret

00000786 <__vector_11>:

ISR(USB_GEN_vect, ISR_BLOCK)
{
     786:	1f 92       	push	r1
     788:	0f 92       	push	r0
     78a:	0f b6       	in	r0, 0x3f	; 63
     78c:	0f 92       	push	r0
     78e:	11 24       	eor	r1, r1
     790:	2f 93       	push	r18
     792:	3f 93       	push	r19
     794:	4f 93       	push	r20
     796:	5f 93       	push	r21
     798:	6f 93       	push	r22
     79a:	7f 93       	push	r23
     79c:	8f 93       	push	r24
     79e:	9f 93       	push	r25
     7a0:	af 93       	push	r26
     7a2:	bf 93       	push	r27
     7a4:	ef 93       	push	r30
     7a6:	ff 93       	push	r31
					case USB_INT_SUSPI:
						return (UDINT  & (1 << SUSPI));
					case USB_INT_EORSTI:
						return (UDINT  & (1 << EORSTI));
					case USB_INT_SOFI:
						return (UDINT  & (1 << SOFI));
     7a8:	80 91 e1 00 	lds	r24, 0x00E1
	#if defined(USB_CAN_BE_DEVICE)
	#if !defined(NO_SOF_EVENTS)
	if (USB_INT_HasOccurred(USB_INT_SOFI) && USB_INT_IsEnabled(USB_INT_SOFI))
     7ac:	82 ff       	sbrs	r24, 2
     7ae:	0a c0       	rjmp	.+20     	; 0x7c4 <__vector_11+0x3e>
					case USB_INT_SUSPI:
						return (UDIEN  & (1 << SUSPE));
					case USB_INT_EORSTI:
						return (UDIEN  & (1 << EORSTE));
					case USB_INT_SOFI:
						return (UDIEN  & (1 << SOFE));
     7b0:	80 91 e2 00 	lds	r24, 0x00E2
     7b4:	82 ff       	sbrs	r24, 2
     7b6:	06 c0       	rjmp	.+12     	; 0x7c4 <__vector_11+0x3e>
						break;
					case USB_INT_EORSTI:
						UDINT  &= ~(1 << EORSTI);
						break;
					case USB_INT_SOFI:
						UDINT  &= ~(1 << SOFI);
     7b8:	80 91 e1 00 	lds	r24, 0x00E1
     7bc:	8b 7f       	andi	r24, 0xFB	; 251
     7be:	80 93 e1 00 	sts	0x00E1, r24
	{
		USB_INT_Clear(USB_INT_SOFI);

		EVENT_USB_Device_StartOfFrame();
     7c2:	af d4       	rcall	.+2398   	; 0x1122 <EVENT_USB_Device_StartOfFrame>
     7c4:	80 91 e1 00 	lds	r24, 0x00E1
     7c8:	80 ff       	sbrs	r24, 0
			EVENT_USB_Device_Disconnect();
		}
	}
	#endif

	if (USB_INT_HasOccurred(USB_INT_SUSPI) && USB_INT_IsEnabled(USB_INT_SUSPI))
     7ca:	17 c0       	rjmp	.+46     	; 0x7fa <__vector_11+0x74>
     7cc:	80 91 e2 00 	lds	r24, 0x00E2
     7d0:	80 ff       	sbrs	r24, 0
     7d2:	13 c0       	rjmp	.+38     	; 0x7fa <__vector_11+0x74>
     7d4:	80 91 e2 00 	lds	r24, 0x00E2
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDIEN  &= ~(1 << WAKEUPE);
						break;
					case USB_INT_SUSPI:
						UDIEN  &= ~(1 << SUSPE);
     7d8:	8e 7f       	andi	r24, 0xFE	; 254
     7da:	80 93 e2 00 	sts	0x00E2, r24
     7de:	80 91 e2 00 	lds	r24, 0x00E2
						USBCON |= (1 << IDTE);
						break;
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDIEN  |= (1 << WAKEUPE);
     7e2:	80 61       	ori	r24, 0x10	; 16
     7e4:	80 93 e2 00 	sts	0x00E2, r24
     7e8:	80 91 d8 00 	lds	r24, 0x00D8
			#endif

			static inline void USB_CLK_Freeze(void) ATTR_ALWAYS_INLINE;
			static inline void USB_CLK_Freeze(void)
			{
				USBCON |=  (1 << FRZCLK);
     7ec:	80 62       	ori	r24, 0x20	; 32
     7ee:	80 93 d8 00 	sts	0x00D8, r24
     7f2:	19 bc       	out	0x29, r1	; 41
     7f4:	10 92 20 01 	sts	0x0120, r1

		if (!(USB_Options & USB_OPT_MANUAL_PLL))
		  USB_PLL_Off();

		#if defined(USB_SERIES_2_AVR) && !defined(NO_LIMITED_CONTROLLER_CONNECT)
		USB_DeviceState = DEVICE_STATE_Unattached;
     7f8:	87 d4       	rcall	.+2318   	; 0x1108 <EVENT_USB_Device_Disconnect>
     7fa:	80 91 e1 00 	lds	r24, 0x00E1
     7fe:	84 ff       	sbrs	r24, 4
     800:	2d c0       	rjmp	.+90     	; 0x85c <__vector_11+0xd6>
     802:	80 91 e2 00 	lds	r24, 0x00E2
     806:	84 ff       	sbrs	r24, 4
     808:	29 c0       	rjmp	.+82     	; 0x85c <__vector_11+0xd6>
     80a:	84 e0       	ldi	r24, 0x04	; 4
     80c:	89 bd       	out	0x29, r24	; 41

		/* Inline Functions: */
			static inline void USB_PLL_On(void) ATTR_ALWAYS_INLINE;
			static inline void USB_PLL_On(void)
			{
				PLLCSR = USB_PLL_PSC;
     80e:	86 e0       	ldi	r24, 0x06	; 6
     810:	89 bd       	out	0x29, r24	; 41
     812:	09 b4       	in	r0, 0x29	; 41
     814:	00 fe       	sbrs	r0, 0
	if (USB_INT_HasOccurred(USB_INT_WAKEUPI) && USB_INT_IsEnabled(USB_INT_WAKEUPI))
	{
		if (!(USB_Options & USB_OPT_MANUAL_PLL))
		{
			USB_PLL_On();
			while (!(USB_PLL_IsReady()));
     816:	fd cf       	rjmp	.-6      	; 0x812 <__vector_11+0x8c>
     818:	80 91 d8 00 	lds	r24, 0x00D8
			}

			static inline void USB_CLK_Unfreeze(void) ATTR_ALWAYS_INLINE;
			static inline void USB_CLK_Unfreeze(void)
			{
				USBCON &= ~(1 << FRZCLK);
     81c:	8f 7d       	andi	r24, 0xDF	; 223
     81e:	80 93 d8 00 	sts	0x00D8, r24
     822:	80 91 e1 00 	lds	r24, 0x00E1
						USBINT &= ~(1 << IDTI);
						break;
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDINT  &= ~(1 << WAKEUPI);
     826:	8f 7e       	andi	r24, 0xEF	; 239
     828:	80 93 e1 00 	sts	0x00E1, r24
     82c:	80 91 e2 00 	lds	r24, 0x00E2
						USBCON &= ~(1 << IDTE);
						break;
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDIEN  &= ~(1 << WAKEUPE);
     830:	8f 7e       	andi	r24, 0xEF	; 239
     832:	80 93 e2 00 	sts	0x00E2, r24
     836:	80 91 e2 00 	lds	r24, 0x00E2
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDIEN  |= (1 << WAKEUPE);
						break;
					case USB_INT_SUSPI:
						UDIEN  |= (1 << SUSPE);
     83a:	81 60       	ori	r24, 0x01	; 1
     83c:	80 93 e2 00 	sts	0x00E2, r24
     840:	80 91 1c 01 	lds	r24, 0x011C
		USB_INT_Clear(USB_INT_WAKEUPI);

		USB_INT_Disable(USB_INT_WAKEUPI);
		USB_INT_Enable(USB_INT_SUSPI);

		if (USB_Device_ConfigurationNumber)
     844:	88 23       	and	r24, r24
     846:	21 f4       	brne	.+8      	; 0x850 <__vector_11+0xca>
     848:	80 91 e3 00 	lds	r24, 0x00E3
     84c:	87 ff       	sbrs	r24, 7
     84e:	02 c0       	rjmp	.+4      	; 0x854 <__vector_11+0xce>
		  USB_DeviceState = DEVICE_STATE_Configured;
		else
		  USB_DeviceState = (USB_Device_IsAddressSet()) ? DEVICE_STATE_Configured : DEVICE_STATE_Powered;
     850:	84 e0       	ldi	r24, 0x04	; 4
     852:	01 c0       	rjmp	.+2      	; 0x856 <__vector_11+0xd0>
     854:	81 e0       	ldi	r24, 0x01	; 1
     856:	80 93 20 01 	sts	0x0120, r24
     85a:	55 d4       	rcall	.+2218   	; 0x1106 <EVENT_USB_Device_Connect>
     85c:	80 91 e1 00 	lds	r24, 0x00E1
     860:	83 ff       	sbrs	r24, 3
     862:	22 c0       	rjmp	.+68     	; 0x8a8 <__vector_11+0x122>
     864:	80 91 e2 00 	lds	r24, 0x00E2
     868:	83 ff       	sbrs	r24, 3
     86a:	1e c0       	rjmp	.+60     	; 0x8a8 <__vector_11+0x122>
     86c:	80 91 e1 00 	lds	r24, 0x00E1
     870:	87 7f       	andi	r24, 0xF7	; 247
						break;
					case USB_INT_SUSPI:
						UDINT  &= ~(1 << SUSPI);
						break;
					case USB_INT_EORSTI:
						UDINT  &= ~(1 << EORSTI);
     872:	80 93 e1 00 	sts	0x00E1, r24
     876:	82 e0       	ldi	r24, 0x02	; 2
     878:	80 93 20 01 	sts	0x0120, r24

	if (USB_INT_HasOccurred(USB_INT_EORSTI) && USB_INT_IsEnabled(USB_INT_EORSTI))
	{
		USB_INT_Clear(USB_INT_EORSTI);

		USB_DeviceState                = DEVICE_STATE_Default;
     87c:	10 92 1c 01 	sts	0x011C, r1
     880:	80 91 e1 00 	lds	r24, 0x00E1
     884:	8e 7f       	andi	r24, 0xFE	; 254
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDINT  &= ~(1 << WAKEUPI);
						break;
					case USB_INT_SUSPI:
						UDINT  &= ~(1 << SUSPI);
     886:	80 93 e1 00 	sts	0x00E1, r24
     88a:	80 91 e2 00 	lds	r24, 0x00E2
     88e:	8e 7f       	andi	r24, 0xFE	; 254
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDIEN  &= ~(1 << WAKEUPE);
						break;
					case USB_INT_SUSPI:
						UDIEN  &= ~(1 << SUSPE);
     890:	80 93 e2 00 	sts	0x00E2, r24
     894:	80 91 e2 00 	lds	r24, 0x00E2
     898:	80 61       	ori	r24, 0x10	; 16
						USBCON |= (1 << IDTE);
						break;
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDIEN  |= (1 << WAKEUPE);
     89a:	80 93 e2 00 	sts	0x00E2, r24
     89e:	80 e0       	ldi	r24, 0x00	; 0
     8a0:	60 e0       	ldi	r22, 0x00	; 0
     8a2:	42 e0       	ldi	r20, 0x02	; 2
				uint8_t Number = (Address & ENDPOINT_EPNUM_MASK);
			
				if (Number >= ENDPOINT_TOTAL_ENDPOINTS)
				  return false;
			
				return Endpoint_ConfigureEndpoint_Prv(Number,
     8a4:	63 de       	rcall	.-826    	; 0x56c <Endpoint_ConfigureEndpoint_Prv>
     8a6:	7a d1       	rcall	.+756    	; 0xb9c <USB_Event_Stub>
     8a8:	ff 91       	pop	r31
     8aa:	ef 91       	pop	r30
     8ac:	bf 91       	pop	r27

		#if defined(INTERRUPT_CONTROL_ENDPOINT)
		USB_INT_Enable(USB_INT_RXSTPI);
		#endif

		EVENT_USB_Device_Reset();
     8ae:	af 91       	pop	r26
     8b0:	9f 91       	pop	r25
		USB_ResetInterface();

		EVENT_USB_UIDChange();
	}
	#endif
}
     8b2:	8f 91       	pop	r24
     8b4:	7f 91       	pop	r23
     8b6:	6f 91       	pop	r22
     8b8:	5f 91       	pop	r21
     8ba:	4f 91       	pop	r20
     8bc:	3f 91       	pop	r19
     8be:	2f 91       	pop	r18
     8c0:	0f 90       	pop	r0
     8c2:	0f be       	out	0x3f, r0	; 63
     8c4:	0f 90       	pop	r0
     8c6:	1f 90       	pop	r1
     8c8:	18 95       	reti

000008ca <USB_Device_ProcessControlRequest>:
#if !defined(NO_DEVICE_REMOTE_WAKEUP)
bool    USB_Device_RemoteWakeupEnabled;
#endif

void USB_Device_ProcessControlRequest(void)
{
     8ca:	0f 93       	push	r16
     8cc:	1f 93       	push	r17
     8ce:	cf 93       	push	r28
     8d0:	df 93       	push	r29
     8d2:	cd b7       	in	r28, 0x3d	; 61
     8d4:	de b7       	in	r29, 0x3e	; 62
     8d6:	ac 97       	sbiw	r28, 0x2c	; 44
     8d8:	0f b6       	in	r0, 0x3f	; 63
     8da:	f8 94       	cli
     8dc:	de bf       	out	0x3e, r29	; 62
     8de:	0f be       	out	0x3f, r0	; 63
     8e0:	cd bf       	out	0x3d, r28	; 61
	USB_ControlRequest.wIndex        = Endpoint_Read_16_LE();
	USB_ControlRequest.wLength       = Endpoint_Read_16_LE();
	#else
	uint8_t* RequestHeader = (uint8_t*)&USB_ControlRequest;

	for (uint8_t RequestHeaderByte = 0; RequestHeaderByte < sizeof(USB_Request_Header_t); RequestHeaderByte++)
     8e2:	80 e0       	ldi	r24, 0x00	; 0
	USB_ControlRequest.bRequest      = Endpoint_Read_8();
	USB_ControlRequest.wValue        = Endpoint_Read_16_LE();
	USB_ControlRequest.wIndex        = Endpoint_Read_16_LE();
	USB_ControlRequest.wLength       = Endpoint_Read_16_LE();
	#else
	uint8_t* RequestHeader = (uint8_t*)&USB_ControlRequest;
     8e4:	e1 e2       	ldi	r30, 0x21	; 33
     8e6:	f1 e0       	ldi	r31, 0x01	; 1
			 *  \return Next byte in the currently selected endpoint's FIFO buffer.
			 */
			static inline uint8_t Endpoint_Read_8(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_Read_8(void)
			{
				return UEDATX;
     8e8:	90 91 f1 00 	lds	r25, 0x00F1

	for (uint8_t RequestHeaderByte = 0; RequestHeaderByte < sizeof(USB_Request_Header_t); RequestHeaderByte++)
	  *(RequestHeader++) = Endpoint_Read_8();
     8ec:	91 93       	st	Z+, r25
	USB_ControlRequest.wIndex        = Endpoint_Read_16_LE();
	USB_ControlRequest.wLength       = Endpoint_Read_16_LE();
	#else
	uint8_t* RequestHeader = (uint8_t*)&USB_ControlRequest;

	for (uint8_t RequestHeaderByte = 0; RequestHeaderByte < sizeof(USB_Request_Header_t); RequestHeaderByte++)
     8ee:	8f 5f       	subi	r24, 0xFF	; 255
     8f0:	88 30       	cpi	r24, 0x08	; 8
     8f2:	d1 f7       	brne	.-12     	; 0x8e8 <USB_Device_ProcessControlRequest+0x1e>
	  *(RequestHeader++) = Endpoint_Read_8();
	#endif

	EVENT_USB_Device_ControlRequest();
     8f4:	13 d4       	rcall	.+2086   	; 0x111c <EVENT_USB_Device_ControlRequest>
     8f6:	80 91 e8 00 	lds	r24, 0x00E8
     8fa:	83 ff       	sbrs	r24, 3

	if (Endpoint_IsSETUPReceived())
     8fc:	36 c1       	rjmp	.+620    	; 0xb6a <USB_Device_ProcessControlRequest+0x2a0>
     8fe:	80 91 21 01 	lds	r24, 0x0121
	{
		uint8_t bmRequestType = USB_ControlRequest.bmRequestType;
     902:	20 91 22 01 	lds	r18, 0x0122

		switch (USB_ControlRequest.bRequest)
     906:	25 30       	cpi	r18, 0x05	; 5
     908:	09 f4       	brne	.+2      	; 0x90c <USB_Device_ProcessControlRequest+0x42>
     90a:	84 c0       	rjmp	.+264    	; 0xa14 <USB_Device_ProcessControlRequest+0x14a>
     90c:	26 30       	cpi	r18, 0x06	; 6
     90e:	40 f4       	brcc	.+16     	; 0x920 <USB_Device_ProcessControlRequest+0x56>
     910:	21 30       	cpi	r18, 0x01	; 1
     912:	a1 f1       	breq	.+104    	; 0x97c <USB_Device_ProcessControlRequest+0xb2>
     914:	21 30       	cpi	r18, 0x01	; 1
     916:	70 f0       	brcs	.+28     	; 0x934 <USB_Device_ProcessControlRequest+0x6a>
     918:	23 30       	cpi	r18, 0x03	; 3
     91a:	09 f0       	breq	.+2      	; 0x91e <USB_Device_ProcessControlRequest+0x54>
     91c:	26 c1       	rjmp	.+588    	; 0xb6a <USB_Device_ProcessControlRequest+0x2a0>
     91e:	2e c0       	rjmp	.+92     	; 0x97c <USB_Device_ProcessControlRequest+0xb2>
     920:	28 30       	cpi	r18, 0x08	; 8
     922:	09 f4       	brne	.+2      	; 0x926 <USB_Device_ProcessControlRequest+0x5c>
     924:	f4 c0       	rjmp	.+488    	; 0xb0e <USB_Device_ProcessControlRequest+0x244>
     926:	29 30       	cpi	r18, 0x09	; 9
     928:	09 f4       	brne	.+2      	; 0x92c <USB_Device_ProcessControlRequest+0x62>
     92a:	03 c1       	rjmp	.+518    	; 0xb32 <USB_Device_ProcessControlRequest+0x268>
     92c:	26 30       	cpi	r18, 0x06	; 6
     92e:	09 f0       	breq	.+2      	; 0x932 <USB_Device_ProcessControlRequest+0x68>
     930:	1c c1       	rjmp	.+568    	; 0xb6a <USB_Device_ProcessControlRequest+0x2a0>
     932:	94 c0       	rjmp	.+296    	; 0xa5c <USB_Device_ProcessControlRequest+0x192>
     934:	80 38       	cpi	r24, 0x80	; 128
		{
			case REQ_GetStatus:
				if ((bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_STANDARD | REQREC_DEVICE)) ||
     936:	21 f0       	breq	.+8      	; 0x940 <USB_Device_ProcessControlRequest+0x76>
     938:	82 38       	cpi	r24, 0x82	; 130
     93a:	09 f0       	breq	.+2      	; 0x93e <USB_Device_ProcessControlRequest+0x74>
     93c:	16 c1       	rjmp	.+556    	; 0xb6a <USB_Device_ProcessControlRequest+0x2a0>
     93e:	08 c0       	rjmp	.+16     	; 0x950 <USB_Device_ProcessControlRequest+0x86>
     940:	80 91 1d 01 	lds	r24, 0x011D
	Endpoint_ClearOUT();
}

static void USB_Device_GetStatus(void)
{
	uint8_t CurrentStatus = 0;
     944:	90 91 1e 01 	lds	r25, 0x011E
			if (USB_Device_CurrentlySelfPowered)
			  CurrentStatus |= FEATURE_SELFPOWERED_ENABLED;
			#endif

			#if !defined(NO_DEVICE_REMOTE_WAKEUP)
			if (USB_Device_RemoteWakeupEnabled)
     948:	99 23       	and	r25, r25
     94a:	71 f0       	breq	.+28     	; 0x968 <USB_Device_ProcessControlRequest+0x9e>
     94c:	82 60       	ori	r24, 0x02	; 2
			  CurrentStatus |= FEATURE_REMOTE_WAKEUP_ENABLED;
     94e:	0c c0       	rjmp	.+24     	; 0x968 <USB_Device_ProcessControlRequest+0x9e>
     950:	80 91 25 01 	lds	r24, 0x0125
			#endif
			break;
		case (REQDIR_DEVICETOHOST | REQTYPE_STANDARD | REQREC_ENDPOINT):
			#if !defined(CONTROL_ONLY_DEVICE)
			Endpoint_SelectEndpoint((uint8_t)USB_ControlRequest.wIndex & ENDPOINT_EPNUM_MASK);
     954:	8f 70       	andi	r24, 0x0F	; 15
     956:	80 93 e9 00 	sts	0x00E9, r24
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
     95a:	90 91 eb 00 	lds	r25, 0x00EB
     95e:	81 e0       	ldi	r24, 0x01	; 1

			CurrentStatus = Endpoint_IsStalled();
     960:	95 ff       	sbrs	r25, 5
     962:	80 e0       	ldi	r24, 0x00	; 0
     964:	10 92 e9 00 	sts	0x00E9, r1
     968:	90 91 e8 00 	lds	r25, 0x00E8
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
     96c:	97 7f       	andi	r25, 0xF7	; 247
     96e:	90 93 e8 00 	sts	0x00E8, r25
     972:	80 93 f1 00 	sts	0x00F1, r24
			 *  \param[in] Data  Data to write to the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_16_LE(const uint16_t Data) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_16_LE(const uint16_t Data)
			{
				UEDATX = (Data & 0xFF);
     976:	10 92 f1 00 	sts	0x00F1, r1
				UEDATX = (Data >> 8);
     97a:	d4 c0       	rjmp	.+424    	; 0xb24 <USB_Device_ProcessControlRequest+0x25a>
     97c:	88 23       	and	r24, r24
				}

				break;
			case REQ_ClearFeature:
			case REQ_SetFeature:
				if ((bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_STANDARD | REQREC_DEVICE)) ||
     97e:	19 f0       	breq	.+6      	; 0x986 <USB_Device_ProcessControlRequest+0xbc>
     980:	82 30       	cpi	r24, 0x02	; 2
     982:	09 f0       	breq	.+2      	; 0x986 <USB_Device_ProcessControlRequest+0xbc>
     984:	f2 c0       	rjmp	.+484    	; 0xb6a <USB_Device_ProcessControlRequest+0x2a0>
     986:	90 e0       	ldi	r25, 0x00	; 0
	Endpoint_ClearStatusStage();
}

static void USB_Device_ClearSetFeature(void)
{
	switch (USB_ControlRequest.bmRequestType & CONTROL_REQTYPE_RECIPIENT)
     988:	8f 71       	andi	r24, 0x1F	; 31
     98a:	90 70       	andi	r25, 0x00	; 0
     98c:	00 97       	sbiw	r24, 0x00	; 0
     98e:	29 f0       	breq	.+10     	; 0x99a <USB_Device_ProcessControlRequest+0xd0>
     990:	82 30       	cpi	r24, 0x02	; 2
     992:	91 05       	cpc	r25, r1
     994:	09 f0       	breq	.+2      	; 0x998 <USB_Device_ProcessControlRequest+0xce>
     996:	e9 c0       	rjmp	.+466    	; 0xb6a <USB_Device_ProcessControlRequest+0x2a0>
     998:	0b c0       	rjmp	.+22     	; 0x9b0 <USB_Device_ProcessControlRequest+0xe6>
     99a:	80 91 23 01 	lds	r24, 0x0123
	{
		#if !defined(NO_DEVICE_REMOTE_WAKEUP)
		case REQREC_DEVICE:
			if ((uint8_t)USB_ControlRequest.wValue == FEATURE_SEL_DeviceRemoteWakeup)
     99e:	81 30       	cpi	r24, 0x01	; 1
     9a0:	09 f0       	breq	.+2      	; 0x9a4 <USB_Device_ProcessControlRequest+0xda>
     9a2:	e3 c0       	rjmp	.+454    	; 0xb6a <USB_Device_ProcessControlRequest+0x2a0>
     9a4:	23 30       	cpi	r18, 0x03	; 3
			  USB_Device_RemoteWakeupEnabled = (USB_ControlRequest.bRequest == REQ_SetFeature);
     9a6:	09 f0       	breq	.+2      	; 0x9aa <USB_Device_ProcessControlRequest+0xe0>
     9a8:	80 e0       	ldi	r24, 0x00	; 0
     9aa:	80 93 1e 01 	sts	0x011E, r24
     9ae:	2c c0       	rjmp	.+88     	; 0xa08 <USB_Device_ProcessControlRequest+0x13e>
     9b0:	80 91 23 01 	lds	r24, 0x0123

			break;
		#endif
		#if !defined(CONTROL_ONLY_DEVICE)
		case REQREC_ENDPOINT:
			if ((uint8_t)USB_ControlRequest.wValue == FEATURE_SEL_EndpointHalt)
     9b4:	88 23       	and	r24, r24
     9b6:	41 f5       	brne	.+80     	; 0xa08 <USB_Device_ProcessControlRequest+0x13e>
     9b8:	20 91 25 01 	lds	r18, 0x0125
			{
				uint8_t EndpointIndex = ((uint8_t)USB_ControlRequest.wIndex & ENDPOINT_EPNUM_MASK);
     9bc:	2f 70       	andi	r18, 0x0F	; 15
     9be:	09 f4       	brne	.+2      	; 0x9c2 <USB_Device_ProcessControlRequest+0xf8>

				if (EndpointIndex == ENDPOINT_CONTROLEP)
     9c0:	d4 c0       	rjmp	.+424    	; 0xb6a <USB_Device_ProcessControlRequest+0x2a0>
     9c2:	20 93 e9 00 	sts	0x00E9, r18
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
     9c6:	80 91 eb 00 	lds	r24, 0x00EB
     9ca:	80 ff       	sbrs	r24, 0
				  return;

				Endpoint_SelectEndpoint(EndpointIndex);

				if (Endpoint_IsEnabled())
     9cc:	1d c0       	rjmp	.+58     	; 0xa08 <USB_Device_ProcessControlRequest+0x13e>
     9ce:	80 91 22 01 	lds	r24, 0x0122
				{
					if (USB_ControlRequest.bRequest == REQ_SetFeature)
     9d2:	83 30       	cpi	r24, 0x03	; 3
     9d4:	21 f4       	brne	.+8      	; 0x9de <USB_Device_ProcessControlRequest+0x114>
     9d6:	80 91 eb 00 	lds	r24, 0x00EB
			 *  \ingroup Group_EndpointPacketManagement_AVR8
			 */
			static inline void Endpoint_StallTransaction(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_StallTransaction(void)
			{
				UECONX |= (1 << STALLRQ);
     9da:	80 62       	ori	r24, 0x20	; 32
     9dc:	13 c0       	rjmp	.+38     	; 0xa04 <USB_Device_ProcessControlRequest+0x13a>
     9de:	80 91 eb 00 	lds	r24, 0x00EB
			 *  \ingroup Group_EndpointPacketManagement_AVR8
			 */
			static inline void Endpoint_ClearStall(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearStall(void)
			{
				UECONX |= (1 << STALLRQC);
     9e2:	80 61       	ori	r24, 0x10	; 16
     9e4:	80 93 eb 00 	sts	0x00EB, r24
     9e8:	81 e0       	ldi	r24, 0x01	; 1
			 *  \param[in] Address  Endpoint address whose FIFO buffers are to be reset.
			 */
			static inline void Endpoint_ResetEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ResetEndpoint(const uint8_t Address)
			{
				UERST = (1 << (Address & ENDPOINT_EPNUM_MASK));
     9ea:	90 e0       	ldi	r25, 0x00	; 0
     9ec:	02 c0       	rjmp	.+4      	; 0x9f2 <USB_Device_ProcessControlRequest+0x128>
     9ee:	88 0f       	add	r24, r24
     9f0:	99 1f       	adc	r25, r25
     9f2:	2a 95       	dec	r18
     9f4:	e2 f7       	brpl	.-8      	; 0x9ee <USB_Device_ProcessControlRequest+0x124>
     9f6:	80 93 ea 00 	sts	0x00EA, r24
     9fa:	10 92 ea 00 	sts	0x00EA, r1
				UERST = 0;
     9fe:	80 91 eb 00 	lds	r24, 0x00EB

			/** Resets the data toggle of the currently selected endpoint. */
			static inline void Endpoint_ResetDataToggle(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ResetDataToggle(void)
			{
				UECONX |= (1 << RSTDT);
     a02:	88 60       	ori	r24, 0x08	; 8
     a04:	80 93 eb 00 	sts	0x00EB, r24
     a08:	10 92 e9 00 	sts	0x00E9, r1
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
     a0c:	80 91 e8 00 	lds	r24, 0x00E8
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
     a10:	87 7f       	andi	r24, 0xF7	; 247
     a12:	8b c0       	rjmp	.+278    	; 0xb2a <USB_Device_ProcessControlRequest+0x260>
     a14:	88 23       	and	r24, r24
					USB_Device_ClearSetFeature();
				}

				break;
			case REQ_SetAddress:
				if (bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_STANDARD | REQREC_DEVICE))
     a16:	09 f0       	breq	.+2      	; 0xa1a <USB_Device_ProcessControlRequest+0x150>
     a18:	a8 c0       	rjmp	.+336    	; 0xb6a <USB_Device_ProcessControlRequest+0x2a0>
     a1a:	10 91 23 01 	lds	r17, 0x0123
	}
}

static void USB_Device_SetAddress(void)
{
	uint8_t    DeviceAddress    = (USB_ControlRequest.wValue & 0x7F);
     a1e:	1f 77       	andi	r17, 0x7F	; 127
     a20:	0f b7       	in	r16, 0x3f	; 63
			static inline uint_reg_t GetGlobalInterruptMask(void)
			{
				GCC_MEMORY_BARRIER();

				#if (ARCH == ARCH_AVR8)
				return SREG;
     a22:	f8 94       	cli
			static inline void GlobalInterruptDisable(void)
			{
				GCC_MEMORY_BARRIER();

				#if (ARCH == ARCH_AVR8)
				cli();
     a24:	80 91 e8 00 	lds	r24, 0x00E8
     a28:	87 7f       	andi	r24, 0xF7	; 247
     a2a:	80 93 e8 00 	sts	0x00E8, r24
     a2e:	0f de       	rcall	.-994    	; 0x64e <Endpoint_ClearStatusStage>
     a30:	80 91 e8 00 	lds	r24, 0x00E8
     a34:	80 ff       	sbrs	r24, 0
     a36:	fc cf       	rjmp	.-8      	; 0xa30 <USB_Device_ProcessControlRequest+0x166>
     a38:	80 91 e3 00 	lds	r24, 0x00E3
			#endif

			static inline void USB_Device_SetDeviceAddress(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void USB_Device_SetDeviceAddress(const uint8_t Address)
			{
				uint8_t Temp = (UDADDR & (1 << ADDEN)) | (Address & 0x7F);
     a3c:	80 78       	andi	r24, 0x80	; 128
     a3e:	81 2b       	or	r24, r17
     a40:	80 93 e3 00 	sts	0x00E3, r24

				UDADDR = Temp;
     a44:	80 68       	ori	r24, 0x80	; 128
     a46:	80 93 e3 00 	sts	0x00E3, r24
     a4a:	11 23       	and	r17, r17
     a4c:	11 f0       	breq	.+4      	; 0xa52 <USB_Device_ProcessControlRequest+0x188>
	Endpoint_ClearStatusStage();

	while (!(Endpoint_IsINReady()));

	USB_Device_SetDeviceAddress(DeviceAddress);
	USB_DeviceState = (DeviceAddress) ? DEVICE_STATE_Addressed : DEVICE_STATE_Default;
     a4e:	83 e0       	ldi	r24, 0x03	; 3
     a50:	01 c0       	rjmp	.+2      	; 0xa54 <USB_Device_ProcessControlRequest+0x18a>
     a52:	82 e0       	ldi	r24, 0x02	; 2
     a54:	80 93 20 01 	sts	0x0120, r24
     a58:	0f bf       	out	0x3f, r16	; 63
     a5a:	87 c0       	rjmp	.+270    	; 0xb6a <USB_Device_ProcessControlRequest+0x2a0>
			static inline void SetGlobalInterruptMask(const uint_reg_t GlobalIntState)
			{
				GCC_MEMORY_BARRIER();

				#if (ARCH == ARCH_AVR8)
				SREG = GlobalIntState;
     a5c:	80 58       	subi	r24, 0x80	; 128
     a5e:	82 30       	cpi	r24, 0x02	; 2
				if (bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_STANDARD | REQREC_DEVICE))
				  USB_Device_SetAddress();

				break;
			case REQ_GetDescriptor:
				if ((bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_STANDARD | REQREC_DEVICE)) ||
     a60:	08 f0       	brcs	.+2      	; 0xa64 <USB_Device_ProcessControlRequest+0x19a>
     a62:	83 c0       	rjmp	.+262    	; 0xb6a <USB_Device_ProcessControlRequest+0x2a0>
     a64:	80 91 23 01 	lds	r24, 0x0123
	    !(defined(USE_FLASH_DESCRIPTORS) || defined(USE_EEPROM_DESCRIPTORS) || defined(USE_RAM_DESCRIPTORS))
	uint8_t DescriptorAddressSpace;
	#endif

	#if !defined(NO_INTERNAL_SERIAL) && (USE_INTERNAL_SERIAL != NO_DESCRIPTOR)
	if (USB_ControlRequest.wValue == ((DTYPE_String << 8) | USE_INTERNAL_SERIAL))
     a68:	90 91 24 01 	lds	r25, 0x0124
     a6c:	23 e0       	ldi	r18, 0x03	; 3
     a6e:	8c 3d       	cpi	r24, 0xDC	; 220
     a70:	92 07       	cpc	r25, r18
     a72:	a9 f5       	brne	.+106    	; 0xade <USB_Device_ProcessControlRequest+0x214>
     a74:	83 e0       	ldi	r24, 0x03	; 3
     a76:	8c 83       	std	Y+4, r24	; 0x04
	{
		USB_Descriptor_Header_t Header;
		uint16_t                UnicodeString[INTERNAL_SERIAL_LENGTH_BITS / 4];
	} SignatureDescriptor;

	SignatureDescriptor.Header.Type = DTYPE_String;
     a78:	8a e2       	ldi	r24, 0x2A	; 42
     a7a:	8b 83       	std	Y+3, r24	; 0x03
     a7c:	5f b7       	in	r21, 0x3f	; 63
     a7e:	f8 94       	cli
			static inline uint_reg_t GetGlobalInterruptMask(void)
			{
				GCC_MEMORY_BARRIER();

				#if (ARCH == ARCH_AVR8)
				return SREG;
     a80:	de 01       	movw	r26, r28
			static inline void GlobalInterruptDisable(void)
			{
				GCC_MEMORY_BARRIER();

				#if (ARCH == ARCH_AVR8)
				cli();
     a82:	13 96       	adiw	r26, 0x03	; 3
				__builtin_ssrf(AVR32_SR_GM_OFFSET);
				#elif (ARCH == ARCH_XMEGA)
				cli();
				#endif

				GCC_MEMORY_BARRIER();
     a84:	80 e0       	ldi	r24, 0x00	; 0
     a86:	90 e0       	ldi	r25, 0x00	; 0
     a88:	4e e0       	ldi	r20, 0x0E	; 14
     a8a:	61 e2       	ldi	r22, 0x21	; 33
			static inline void USB_Device_GetSerialString(uint16_t* const UnicodeString)
			{
				uint_reg_t CurrentGlobalInt = GetGlobalInterruptMask();
				GlobalInterruptDisable();

				uint8_t SigReadAddress = INTERNAL_SERIAL_START_ADDRESS;
     a8c:	e4 2f       	mov	r30, r20

				for (uint8_t SerialCharNum = 0; SerialCharNum < (INTERNAL_SERIAL_LENGTH_BITS / 4); SerialCharNum++)
				{
					uint8_t SerialByte = boot_signature_byte_get(SigReadAddress);
     a8e:	f0 e0       	ldi	r31, 0x00	; 0
     a90:	60 93 57 00 	sts	0x0057, r22
     a94:	e4 91       	lpm	r30, Z
     a96:	80 ff       	sbrs	r24, 0
     a98:	03 c0       	rjmp	.+6      	; 0xaa0 <USB_Device_ProcessControlRequest+0x1d6>

					if (SerialCharNum & 0x01)
     a9a:	e2 95       	swap	r30
     a9c:	ef 70       	andi	r30, 0x0F	; 15
					{
						SerialByte >>= 4;
     a9e:	4f 5f       	subi	r20, 0xFF	; 255
     aa0:	ef 70       	andi	r30, 0x0F	; 15
						SigReadAddress++;
     aa2:	2e 2f       	mov	r18, r30
					}

					SerialByte &= 0x0F;
     aa4:	30 e0       	ldi	r19, 0x00	; 0
     aa6:	ea 30       	cpi	r30, 0x0A	; 10
     aa8:	18 f0       	brcs	.+6      	; 0xab0 <USB_Device_ProcessControlRequest+0x1e6>

					UnicodeString[SerialCharNum] = cpu_to_le16((SerialByte >= 10) ?
     aaa:	29 5c       	subi	r18, 0xC9	; 201
     aac:	3f 4f       	sbci	r19, 0xFF	; 255
     aae:	02 c0       	rjmp	.+4      	; 0xab4 <USB_Device_ProcessControlRequest+0x1ea>
     ab0:	20 5d       	subi	r18, 0xD0	; 208
     ab2:	3f 4f       	sbci	r19, 0xFF	; 255
     ab4:	13 96       	adiw	r26, 0x03	; 3
     ab6:	3c 93       	st	X, r19
     ab8:	2e 93       	st	-X, r18
     aba:	12 97       	sbiw	r26, 0x02	; 2
     abc:	01 96       	adiw	r24, 0x01	; 1
     abe:	12 96       	adiw	r26, 0x02	; 2
     ac0:	84 31       	cpi	r24, 0x14	; 20
     ac2:	91 05       	cpc	r25, r1
				uint_reg_t CurrentGlobalInt = GetGlobalInterruptMask();
				GlobalInterruptDisable();

				uint8_t SigReadAddress = INTERNAL_SERIAL_START_ADDRESS;

				for (uint8_t SerialCharNum = 0; SerialCharNum < (INTERNAL_SERIAL_LENGTH_BITS / 4); SerialCharNum++)
     ac4:	19 f7       	brne	.-58     	; 0xa8c <USB_Device_ProcessControlRequest+0x1c2>
     ac6:	5f bf       	out	0x3f, r21	; 63
     ac8:	80 91 e8 00 	lds	r24, 0x00E8
     acc:	87 7f       	andi	r24, 0xF7	; 247
     ace:	80 93 e8 00 	sts	0x00E8, r24
     ad2:	ce 01       	movw	r24, r28
     ad4:	03 96       	adiw	r24, 0x03	; 3

	USB_Device_GetSerialString(SignatureDescriptor.UnicodeString);

	Endpoint_ClearSETUP();

	Endpoint_Write_Control_Stream_LE(&SignatureDescriptor, sizeof(SignatureDescriptor));
     ad6:	6a e2       	ldi	r22, 0x2A	; 42
     ad8:	70 e0       	ldi	r23, 0x00	; 0
     ada:	36 dc       	rcall	.-1940   	; 0x348 <Endpoint_Write_Control_Stream_LE>
     adc:	12 c0       	rjmp	.+36     	; 0xb02 <USB_Device_ProcessControlRequest+0x238>
     ade:	60 91 25 01 	lds	r22, 0x0125
     ae2:	ae 01       	movw	r20, r28
		USB_Device_GetInternalSerialDescriptor();
		return;
	}
	#endif

	if ((DescriptorSize = CALLBACK_USB_GetDescriptor(USB_ControlRequest.wValue, USB_ControlRequest.wIndex,
     ae4:	4f 5f       	subi	r20, 0xFF	; 255
     ae6:	5f 4f       	sbci	r21, 0xFF	; 255
     ae8:	f1 d3       	rcall	.+2018   	; 0x12cc <CALLBACK_USB_GetDescriptor>
     aea:	bc 01       	movw	r22, r24
     aec:	00 97       	sbiw	r24, 0x00	; 0
     aee:	09 f4       	brne	.+2      	; 0xaf2 <USB_Device_ProcessControlRequest+0x228>
     af0:	3c c0       	rjmp	.+120    	; 0xb6a <USB_Device_ProcessControlRequest+0x2a0>
     af2:	80 91 e8 00 	lds	r24, 0x00E8
     af6:	87 7f       	andi	r24, 0xF7	; 247
     af8:	80 93 e8 00 	sts	0x00E8, r24
     afc:	89 81       	ldd	r24, Y+1	; 0x01
     afe:	9a 81       	ldd	r25, Y+2	; 0x02
     b00:	cf dc       	rcall	.-1634   	; 0x4a0 <Endpoint_Write_Control_PStream_LE>
     b02:	80 91 e8 00 	lds	r24, 0x00E8
     b06:	8b 77       	andi	r24, 0x7B	; 123
     b08:	80 93 e8 00 	sts	0x00E8, r24
			 */
			static inline void Endpoint_ClearOUT(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearOUT(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << RXOUTI) | (1 << FIFOCON));
     b0c:	2e c0       	rjmp	.+92     	; 0xb6a <USB_Device_ProcessControlRequest+0x2a0>
     b0e:	80 38       	cpi	r24, 0x80	; 128
     b10:	61 f5       	brne	.+88     	; 0xb6a <USB_Device_ProcessControlRequest+0x2a0>
     b12:	80 91 e8 00 	lds	r24, 0x00E8
     b16:	87 7f       	andi	r24, 0xF7	; 247
     b18:	80 93 e8 00 	sts	0x00E8, r24
     b1c:	80 91 1c 01 	lds	r24, 0x011C
     b20:	80 93 f1 00 	sts	0x00F1, r24
     b24:	80 91 e8 00 	lds	r24, 0x00E8
     b28:	8e 77       	andi	r24, 0x7E	; 126
			 *  \param[in] Data  Data to write into the the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_8(const uint8_t Data) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_8(const uint8_t Data)
			{
				UEDATX = Data;
     b2a:	80 93 e8 00 	sts	0x00E8, r24
     b2e:	8f dd       	rcall	.-1250   	; 0x64e <Endpoint_ClearStatusStage>
     b30:	1c c0       	rjmp	.+56     	; 0xb6a <USB_Device_ProcessControlRequest+0x2a0>
     b32:	88 23       	and	r24, r24
     b34:	d1 f4       	brne	.+52     	; 0xb6a <USB_Device_ProcessControlRequest+0x2a0>
     b36:	90 91 23 01 	lds	r25, 0x0123
	Endpoint_ClearSETUP();

	Endpoint_Write_8(USB_Device_ConfigurationNumber);
	Endpoint_ClearIN();

	Endpoint_ClearStatusStage();
     b3a:	92 30       	cpi	r25, 0x02	; 2
     b3c:	b0 f4       	brcc	.+44     	; 0xb6a <USB_Device_ProcessControlRequest+0x2a0>
				if (bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_STANDARD | REQREC_DEVICE))
				  USB_Device_GetConfiguration();

				break;
			case REQ_SetConfiguration:
				if (bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_STANDARD | REQREC_DEVICE))
     b3e:	80 91 e8 00 	lds	r24, 0x00E8
     b42:	87 7f       	andi	r24, 0xF7	; 247
     b44:	80 93 e8 00 	sts	0x00E8, r24
     b48:	90 93 1c 01 	sts	0x011C, r25
     b4c:	80 dd       	rcall	.-1280   	; 0x64e <Endpoint_ClearStatusStage>
     b4e:	80 91 1c 01 	lds	r24, 0x011C
     b52:	88 23       	and	r24, r24
	#endif
	#endif

	Endpoint_ClearSETUP();

	USB_Device_ConfigurationNumber = (uint8_t)USB_ControlRequest.wValue;
     b54:	21 f4       	brne	.+8      	; 0xb5e <USB_Device_ProcessControlRequest+0x294>
     b56:	80 91 e3 00 	lds	r24, 0x00E3

	Endpoint_ClearStatusStage();
     b5a:	87 ff       	sbrs	r24, 7
     b5c:	02 c0       	rjmp	.+4      	; 0xb62 <USB_Device_ProcessControlRequest+0x298>
     b5e:	84 e0       	ldi	r24, 0x04	; 4
     b60:	01 c0       	rjmp	.+2      	; 0xb64 <USB_Device_ProcessControlRequest+0x29a>
     b62:	81 e0       	ldi	r24, 0x01	; 1
     b64:	80 93 20 01 	sts	0x0120, r24

	if (USB_Device_ConfigurationNumber)
	  USB_DeviceState = DEVICE_STATE_Configured;
	else
	  USB_DeviceState = (USB_Device_IsAddressSet()) ? DEVICE_STATE_Configured : DEVICE_STATE_Powered;
     b68:	d0 d2       	rcall	.+1440   	; 0x110a <EVENT_USB_Device_ConfigurationChanged>
     b6a:	80 91 e8 00 	lds	r24, 0x00E8
     b6e:	83 ff       	sbrs	r24, 3
     b70:	0a c0       	rjmp	.+20     	; 0xb86 <USB_Device_ProcessControlRequest+0x2bc>
     b72:	80 91 eb 00 	lds	r24, 0x00EB
     b76:	80 62       	ori	r24, 0x20	; 32
     b78:	80 93 eb 00 	sts	0x00EB, r24
     b7c:	80 91 e8 00 	lds	r24, 0x00E8
     b80:	87 7f       	andi	r24, 0xF7	; 247
			 *  \ingroup Group_EndpointPacketManagement_AVR8
			 */
			static inline void Endpoint_StallTransaction(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_StallTransaction(void)
			{
				UECONX |= (1 << STALLRQ);
     b82:	80 93 e8 00 	sts	0x00E8, r24
     b86:	ac 96       	adiw	r28, 0x2c	; 44
     b88:	0f b6       	in	r0, 0x3f	; 63
     b8a:	f8 94       	cli
     b8c:	de bf       	out	0x3e, r29	; 62
     b8e:	0f be       	out	0x3f, r0	; 63
     b90:	cd bf       	out	0x3d, r28	; 61
     b92:	df 91       	pop	r29
     b94:	cf 91       	pop	r28
	if (Endpoint_IsSETUPReceived())
	{
		Endpoint_StallTransaction();
		Endpoint_ClearSETUP();
	}
}
     b96:	1f 91       	pop	r17
     b98:	0f 91       	pop	r16
     b9a:	08 95       	ret

00000b9c <USB_Event_Stub>:

// cppcheck-suppress unusedFunction
void USB_Event_Stub(void)
{

}
     b9c:	08 95       	ret

00000b9e <USB_USBTask>:
#if defined(USB_CAN_BE_DEVICE) && !defined(DEVICE_STATE_AS_GPIOR)
volatile uint8_t     USB_DeviceState;
#endif

void USB_USBTask(void)
{
     b9e:	cf 93       	push	r28
}

#if defined(USB_CAN_BE_DEVICE)
static void USB_DeviceTask(void)
{
	if (USB_DeviceState == DEVICE_STATE_Unattached)
     ba0:	80 91 20 01 	lds	r24, 0x0120
     ba4:	88 23       	and	r24, r24
     ba6:	a9 f0       	breq	.+42     	; 0xbd2 <USB_USBTask+0x34>
			 */
			static inline uint8_t Endpoint_GetCurrentEndpoint(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_GetCurrentEndpoint(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					return ((UENUM & ENDPOINT_EPNUM_MASK) | Endpoint_GetEndpointDirection());
     ba8:	80 91 e9 00 	lds	r24, 0x00E9
     bac:	8f 70       	andi	r24, 0x0F	; 15
			 *  \return The currently selected endpoint's direction, as a \c ENDPOINT_DIR_* mask.
			 */
			static inline uint8_t Endpoint_GetEndpointDirection(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_GetEndpointDirection(void)
			{
				return (UECFG0X & (1 << EPDIR)) ? ENDPOINT_DIR_IN : ENDPOINT_DIR_OUT;
     bae:	90 91 ec 00 	lds	r25, 0x00EC
     bb2:	90 ff       	sbrs	r25, 0
     bb4:	02 c0       	rjmp	.+4      	; 0xbba <USB_USBTask+0x1c>
     bb6:	c0 e8       	ldi	r28, 0x80	; 128
     bb8:	01 c0       	rjmp	.+2      	; 0xbbc <USB_USBTask+0x1e>
     bba:	c0 e0       	ldi	r28, 0x00	; 0
			 */
			static inline uint8_t Endpoint_GetCurrentEndpoint(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_GetCurrentEndpoint(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					return ((UENUM & ENDPOINT_EPNUM_MASK) | Endpoint_GetEndpointDirection());
     bbc:	c8 2b       	or	r28, r24
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
     bbe:	10 92 e9 00 	sts	0x00E9, r1
			 *  \return Boolean \c true if the selected endpoint has received a SETUP packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsSETUPReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsSETUPReceived(void)
			{
				return ((UEINTX & (1 << RXSTPI)) ? true : false);
     bc2:	80 91 e8 00 	lds	r24, 0x00E8

	uint8_t PrevEndpoint = Endpoint_GetCurrentEndpoint();

	Endpoint_SelectEndpoint(ENDPOINT_CONTROLEP);

	if (Endpoint_IsSETUPReceived())
     bc6:	83 ff       	sbrs	r24, 3
     bc8:	01 c0       	rjmp	.+2      	; 0xbcc <USB_USBTask+0x2e>
	  USB_Device_ProcessControlRequest();
     bca:	7f de       	rcall	.-770    	; 0x8ca <USB_Device_ProcessControlRequest>
     bcc:	cf 70       	andi	r28, 0x0F	; 15
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
     bce:	c0 93 e9 00 	sts	0x00E9, r28
     bd2:	cf 91       	pop	r28
	#elif defined(USB_CAN_BE_HOST)
		USB_HostTask();
	#elif defined(USB_CAN_BE_DEVICE)
		USB_DeviceTask();
	#endif
}
     bd4:	08 95       	ret

00000bd6 <HID_Device_ProcessControlRequest>:
#define  __INCLUDE_FROM_HID_DRIVER
#define  __INCLUDE_FROM_HID_DEVICE_C
#include "HIDClassDevice.h"

void HID_Device_ProcessControlRequest(USB_ClassInfo_HID_Device_t* const HIDInterfaceInfo)
{
     bd6:	6f 92       	push	r6
     bd8:	7f 92       	push	r7
     bda:	8f 92       	push	r8
     bdc:	9f 92       	push	r9
     bde:	af 92       	push	r10
     be0:	bf 92       	push	r11
     be2:	cf 92       	push	r12
     be4:	df 92       	push	r13
     be6:	ef 92       	push	r14
     be8:	ff 92       	push	r15
     bea:	0f 93       	push	r16
     bec:	1f 93       	push	r17
     bee:	cf 93       	push	r28
     bf0:	df 93       	push	r29
     bf2:	00 d0       	rcall	.+0      	; 0xbf4 <HID_Device_ProcessControlRequest+0x1e>
     bf4:	0f 92       	push	r0
     bf6:	cd b7       	in	r28, 0x3d	; 61
     bf8:	de b7       	in	r29, 0x3e	; 62
     bfa:	7c 01       	movw	r14, r24
				Endpoint_ClearStatusStage();
			}

			break;
	}
}
     bfc:	6d b6       	in	r6, 0x3d	; 61
     bfe:	7e b6       	in	r7, 0x3e	; 62
			 *  \return Boolean \c true if the selected endpoint has received a SETUP packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsSETUPReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsSETUPReceived(void)
			{
				return ((UEINTX & (1 << RXSTPI)) ? true : false);
     c00:	80 91 e8 00 	lds	r24, 0x00E8
#define  __INCLUDE_FROM_HID_DEVICE_C
#include "HIDClassDevice.h"

void HID_Device_ProcessControlRequest(USB_ClassInfo_HID_Device_t* const HIDInterfaceInfo)
{
	if (!(Endpoint_IsSETUPReceived()))
     c04:	83 ff       	sbrs	r24, 3
     c06:	03 c1       	rjmp	.+518    	; 0xe0e <HID_Device_ProcessControlRequest+0x238>
	  return;

	if (USB_ControlRequest.wIndex != HIDInterfaceInfo->Config.InterfaceNumber)
     c08:	f7 01       	movw	r30, r14
     c0a:	80 81       	ld	r24, Z
     c0c:	90 e0       	ldi	r25, 0x00	; 0
     c0e:	20 91 25 01 	lds	r18, 0x0125
     c12:	30 91 26 01 	lds	r19, 0x0126
     c16:	28 17       	cp	r18, r24
     c18:	39 07       	cpc	r19, r25
     c1a:	09 f0       	breq	.+2      	; 0xc1e <HID_Device_ProcessControlRequest+0x48>
     c1c:	f8 c0       	rjmp	.+496    	; 0xe0e <HID_Device_ProcessControlRequest+0x238>
	  return;

	switch (USB_ControlRequest.bRequest)
     c1e:	80 91 22 01 	lds	r24, 0x0122
     c22:	83 30       	cpi	r24, 0x03	; 3
     c24:	09 f4       	brne	.+2      	; 0xc28 <HID_Device_ProcessControlRequest+0x52>
     c26:	9a c0       	rjmp	.+308    	; 0xd5c <HID_Device_ProcessControlRequest+0x186>
     c28:	84 30       	cpi	r24, 0x04	; 4
     c2a:	30 f4       	brcc	.+12     	; 0xc38 <HID_Device_ProcessControlRequest+0x62>
     c2c:	81 30       	cpi	r24, 0x01	; 1
     c2e:	71 f0       	breq	.+28     	; 0xc4c <HID_Device_ProcessControlRequest+0x76>
     c30:	82 30       	cpi	r24, 0x02	; 2
     c32:	09 f0       	breq	.+2      	; 0xc36 <HID_Device_ProcessControlRequest+0x60>
     c34:	ec c0       	rjmp	.+472    	; 0xe0e <HID_Device_ProcessControlRequest+0x238>
     c36:	cf c0       	rjmp	.+414    	; 0xdd6 <HID_Device_ProcessControlRequest+0x200>
     c38:	8a 30       	cpi	r24, 0x0A	; 10
     c3a:	09 f4       	brne	.+2      	; 0xc3e <HID_Device_ProcessControlRequest+0x68>
     c3c:	b4 c0       	rjmp	.+360    	; 0xda6 <HID_Device_ProcessControlRequest+0x1d0>
     c3e:	8b 30       	cpi	r24, 0x0B	; 11
     c40:	09 f4       	brne	.+2      	; 0xc44 <HID_Device_ProcessControlRequest+0x6e>
     c42:	9d c0       	rjmp	.+314    	; 0xd7e <HID_Device_ProcessControlRequest+0x1a8>
     c44:	89 30       	cpi	r24, 0x09	; 9
     c46:	09 f0       	breq	.+2      	; 0xc4a <HID_Device_ProcessControlRequest+0x74>
     c48:	e2 c0       	rjmp	.+452    	; 0xe0e <HID_Device_ProcessControlRequest+0x238>
     c4a:	4b c0       	rjmp	.+150    	; 0xce2 <HID_Device_ProcessControlRequest+0x10c>
	{
		case HID_REQ_GetReport:
			if (USB_ControlRequest.bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_CLASS | REQREC_INTERFACE))
     c4c:	80 91 21 01 	lds	r24, 0x0121
     c50:	81 3a       	cpi	r24, 0xA1	; 161
     c52:	09 f0       	breq	.+2      	; 0xc56 <HID_Device_ProcessControlRequest+0x80>
     c54:	dc c0       	rjmp	.+440    	; 0xe0e <HID_Device_ProcessControlRequest+0x238>
     c56:	9d b6       	in	r9, 0x3d	; 61
     c58:	8e b6       	in	r8, 0x3e	; 62
			{
				uint16_t ReportSize = 0;
     c5a:	1b 82       	std	Y+3, r1	; 0x03
     c5c:	1a 82       	std	Y+2, r1	; 0x02
				uint8_t  ReportID   = (USB_ControlRequest.wValue & 0xFF);
     c5e:	80 91 23 01 	lds	r24, 0x0123
     c62:	00 91 24 01 	lds	r16, 0x0124
     c66:	89 83       	std	Y+1, r24	; 0x01
				uint8_t  ReportType = (USB_ControlRequest.wValue >> 8) - 1;
				uint8_t  ReportData[HIDInterfaceInfo->Config.PrevReportINBufferSize];
     c68:	f7 01       	movw	r30, r14
     c6a:	40 85       	ldd	r20, Z+8	; 0x08
     c6c:	8d b7       	in	r24, 0x3d	; 61
     c6e:	9e b7       	in	r25, 0x3e	; 62
     c70:	84 1b       	sub	r24, r20
     c72:	91 09       	sbc	r25, r1
     c74:	0f b6       	in	r0, 0x3f	; 63
     c76:	f8 94       	cli
     c78:	9e bf       	out	0x3e, r25	; 62
     c7a:	0f be       	out	0x3f, r0	; 63
     c7c:	8d bf       	out	0x3d, r24	; 61
     c7e:	cd b6       	in	r12, 0x3d	; 61
     c80:	de b6       	in	r13, 0x3e	; 62
     c82:	08 94       	sec
     c84:	c1 1c       	adc	r12, r1
     c86:	d1 1c       	adc	r13, r1

				memset(ReportData, 0, sizeof(ReportData));
     c88:	bc 2c       	mov	r11, r12
     c8a:	ad 2c       	mov	r10, r13
     c8c:	c6 01       	movw	r24, r12
     c8e:	60 e0       	ldi	r22, 0x00	; 0
     c90:	70 e0       	ldi	r23, 0x00	; 0
     c92:	50 e0       	ldi	r21, 0x00	; 0
     c94:	6e d3       	rcall	.+1756   	; 0x1372 <memset>
     c96:	40 2f       	mov	r20, r16
		case HID_REQ_GetReport:
			if (USB_ControlRequest.bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_CLASS | REQREC_INTERFACE))
			{
				uint16_t ReportSize = 0;
				uint8_t  ReportID   = (USB_ControlRequest.wValue & 0xFF);
				uint8_t  ReportType = (USB_ControlRequest.wValue >> 8) - 1;
     c98:	41 50       	subi	r20, 0x01	; 1
     c9a:	c7 01       	movw	r24, r14
				uint8_t  ReportData[HIDInterfaceInfo->Config.PrevReportINBufferSize];

				memset(ReportData, 0, sizeof(ReportData));

				CALLBACK_HID_Device_CreateHIDReport(HIDInterfaceInfo, &ReportID, ReportType, ReportData, &ReportSize);
     c9c:	be 01       	movw	r22, r28
     c9e:	6f 5f       	subi	r22, 0xFF	; 255
     ca0:	7f 4f       	sbci	r23, 0xFF	; 255
     ca2:	96 01       	movw	r18, r12
     ca4:	8e 01       	movw	r16, r28
     ca6:	0e 5f       	subi	r16, 0xFE	; 254
     ca8:	1f 4f       	sbci	r17, 0xFF	; 255
     caa:	47 d2       	rcall	.+1166   	; 0x113a <CALLBACK_HID_Device_CreateHIDReport>
     cac:	f7 01       	movw	r30, r14
     cae:	86 81       	ldd	r24, Z+6	; 0x06

				if (HIDInterfaceInfo->Config.PrevReportINBuffer != NULL)
     cb0:	97 81       	ldd	r25, Z+7	; 0x07
     cb2:	00 97       	sbiw	r24, 0x00	; 0
     cb4:	21 f0       	breq	.+8      	; 0xcbe <HID_Device_ProcessControlRequest+0xe8>
     cb6:	40 85       	ldd	r20, Z+8	; 0x08
     cb8:	b6 01       	movw	r22, r12
				{
					memcpy(HIDInterfaceInfo->Config.PrevReportINBuffer, ReportData,
     cba:	50 e0       	ldi	r21, 0x00	; 0
     cbc:	51 d3       	rcall	.+1698   	; 0x1360 <memcpy>
     cbe:	10 92 e9 00 	sts	0x00E9, r1
     cc2:	80 91 e8 00 	lds	r24, 0x00E8
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
     cc6:	87 7f       	andi	r24, 0xF7	; 247
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
     cc8:	80 93 e8 00 	sts	0x00E8, r24
     ccc:	6a 81       	ldd	r22, Y+2	; 0x02
     cce:	7b 81       	ldd	r23, Y+3	; 0x03
     cd0:	8b 2d       	mov	r24, r11
				}

				Endpoint_SelectEndpoint(ENDPOINT_CONTROLEP);

				Endpoint_ClearSETUP();
				Endpoint_Write_Control_Stream_LE(ReportData, ReportSize);
     cd2:	9a 2d       	mov	r25, r10
     cd4:	39 db       	rcall	.-2446   	; 0x348 <Endpoint_Write_Control_Stream_LE>
     cd6:	80 91 e8 00 	lds	r24, 0x00E8
     cda:	8b 77       	andi	r24, 0x7B	; 123
     cdc:	80 93 e8 00 	sts	0x00E8, r24
			 */
			static inline void Endpoint_ClearOUT(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearOUT(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << RXOUTI) | (1 << FIFOCON));
     ce0:	3a c0       	rjmp	.+116    	; 0xd56 <HID_Device_ProcessControlRequest+0x180>
     ce2:	80 91 21 01 	lds	r24, 0x0121
     ce6:	81 32       	cpi	r24, 0x21	; 33
     ce8:	09 f0       	breq	.+2      	; 0xcec <HID_Device_ProcessControlRequest+0x116>
				Endpoint_ClearOUT();
			}

			break;
		case HID_REQ_SetReport:
			if (USB_ControlRequest.bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_CLASS | REQREC_INTERFACE))
     cea:	91 c0       	rjmp	.+290    	; 0xe0e <HID_Device_ProcessControlRequest+0x238>
     cec:	9d b6       	in	r9, 0x3d	; 61
     cee:	8e b6       	in	r8, 0x3e	; 62
     cf0:	00 91 27 01 	lds	r16, 0x0127
     cf4:	10 91 28 01 	lds	r17, 0x0128
			{
				uint16_t ReportSize = USB_ControlRequest.wLength;
     cf8:	c0 90 23 01 	lds	r12, 0x0123
     cfc:	d0 90 24 01 	lds	r13, 0x0124
				uint8_t  ReportID   = (USB_ControlRequest.wValue & 0xFF);
     d00:	8d b7       	in	r24, 0x3d	; 61
     d02:	9e b7       	in	r25, 0x3e	; 62
     d04:	80 1b       	sub	r24, r16
     d06:	91 0b       	sbc	r25, r17
				uint8_t  ReportType = (USB_ControlRequest.wValue >> 8) - 1;
				uint8_t  ReportData[ReportSize];
     d08:	0f b6       	in	r0, 0x3f	; 63
     d0a:	f8 94       	cli
     d0c:	9e bf       	out	0x3e, r25	; 62
     d0e:	0f be       	out	0x3f, r0	; 63
     d10:	8d bf       	out	0x3d, r24	; 61
     d12:	ad b6       	in	r10, 0x3d	; 61
     d14:	be b6       	in	r11, 0x3e	; 62
     d16:	08 94       	sec
     d18:	a1 1c       	adc	r10, r1
     d1a:	b1 1c       	adc	r11, r1
     d1c:	80 91 e8 00 	lds	r24, 0x00E8
     d20:	87 7f       	andi	r24, 0xF7	; 247
     d22:	80 93 e8 00 	sts	0x00E8, r24
     d26:	c5 01       	movw	r24, r10
     d28:	b8 01       	movw	r22, r16
     d2a:	73 db       	rcall	.-2330   	; 0x412 <Endpoint_Read_Control_Stream_LE>
     d2c:	80 91 e8 00 	lds	r24, 0x00E8
     d30:	8e 77       	andi	r24, 0x7E	; 126
     d32:	80 93 e8 00 	sts	0x00E8, r24
     d36:	81 e0       	ldi	r24, 0x01	; 1
     d38:	90 e0       	ldi	r25, 0x00	; 0
     d3a:	cc 20       	and	r12, r12
     d3c:	11 f4       	brne	.+4      	; 0xd42 <HID_Device_ProcessControlRequest+0x16c>
     d3e:	80 e0       	ldi	r24, 0x00	; 0

				Endpoint_ClearSETUP();
				Endpoint_Read_Control_Stream_LE(ReportData, ReportSize);
				Endpoint_ClearIN();

				CALLBACK_HID_Device_ProcessHIDReport(HIDInterfaceInfo, ReportID, ReportType,
     d40:	90 e0       	ldi	r25, 0x00	; 0
     d42:	4d 2d       	mov	r20, r13
     d44:	41 50       	subi	r20, 0x01	; 1
     d46:	95 01       	movw	r18, r10
     d48:	28 0f       	add	r18, r24
     d4a:	39 1f       	adc	r19, r25
		case HID_REQ_SetReport:
			if (USB_ControlRequest.bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_CLASS | REQREC_INTERFACE))
			{
				uint16_t ReportSize = USB_ControlRequest.wLength;
				uint8_t  ReportID   = (USB_ControlRequest.wValue & 0xFF);
				uint8_t  ReportType = (USB_ControlRequest.wValue >> 8) - 1;
     d4c:	08 1b       	sub	r16, r24
     d4e:	19 0b       	sbc	r17, r25

				Endpoint_ClearSETUP();
				Endpoint_Read_Control_Stream_LE(ReportData, ReportSize);
				Endpoint_ClearIN();

				CALLBACK_HID_Device_ProcessHIDReport(HIDInterfaceInfo, ReportID, ReportType,
     d50:	c7 01       	movw	r24, r14
     d52:	6c 2d       	mov	r22, r12
     d54:	7a d2       	rcall	.+1268   	; 0x124a <CALLBACK_HID_Device_ProcessHIDReport>
     d56:	9d be       	out	0x3d, r9	; 61
     d58:	8e be       	out	0x3e, r8	; 62
     d5a:	59 c0       	rjmp	.+178    	; 0xe0e <HID_Device_ProcessControlRequest+0x238>
     d5c:	80 91 21 01 	lds	r24, 0x0121
     d60:	81 3a       	cpi	r24, 0xA1	; 161
     d62:	09 f0       	breq	.+2      	; 0xd66 <HID_Device_ProcessControlRequest+0x190>
     d64:	54 c0       	rjmp	.+168    	; 0xe0e <HID_Device_ProcessControlRequest+0x238>
     d66:	80 91 e8 00 	lds	r24, 0x00E8
     d6a:	87 7f       	andi	r24, 0xF7	; 247
     d6c:	80 93 e8 00 	sts	0x00E8, r24
     d70:	80 91 e8 00 	lds	r24, 0x00E8
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
     d74:	80 ff       	sbrs	r24, 0
     d76:	fc cf       	rjmp	.-8      	; 0xd70 <HID_Device_ProcessControlRequest+0x19a>
     d78:	f7 01       	movw	r30, r14
     d7a:	81 85       	ldd	r24, Z+9	; 0x09
     d7c:	40 c0       	rjmp	.+128    	; 0xdfe <HID_Device_ProcessControlRequest+0x228>
     d7e:	80 91 21 01 	lds	r24, 0x0121
			break;
		case HID_REQ_GetProtocol:
			if (USB_ControlRequest.bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_CLASS | REQREC_INTERFACE))
			{
				Endpoint_ClearSETUP();
				while (!(Endpoint_IsINReady()));
     d82:	81 32       	cpi	r24, 0x21	; 33
				Endpoint_Write_8(HIDInterfaceInfo->State.UsingReportProtocol);
     d84:	09 f0       	breq	.+2      	; 0xd88 <HID_Device_ProcessControlRequest+0x1b2>
     d86:	43 c0       	rjmp	.+134    	; 0xe0e <HID_Device_ProcessControlRequest+0x238>
     d88:	80 91 e8 00 	lds	r24, 0x00E8
     d8c:	87 7f       	andi	r24, 0xF7	; 247
     d8e:	80 93 e8 00 	sts	0x00E8, r24
     d92:	5d dc       	rcall	.-1862   	; 0x64e <Endpoint_ClearStatusStage>
     d94:	90 91 23 01 	lds	r25, 0x0123
     d98:	81 e0       	ldi	r24, 0x01	; 1
     d9a:	99 23       	and	r25, r25
     d9c:	09 f4       	brne	.+2      	; 0xda0 <HID_Device_ProcessControlRequest+0x1ca>
			break;
		case HID_REQ_SetProtocol:
			if (USB_ControlRequest.bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_CLASS | REQREC_INTERFACE))
			{
				Endpoint_ClearSETUP();
				Endpoint_ClearStatusStage();
     d9e:	80 e0       	ldi	r24, 0x00	; 0
     da0:	f7 01       	movw	r30, r14

				HIDInterfaceInfo->State.UsingReportProtocol = ((USB_ControlRequest.wValue & 0xFF) != 0x00);
     da2:	81 87       	std	Z+9, r24	; 0x09
     da4:	34 c0       	rjmp	.+104    	; 0xe0e <HID_Device_ProcessControlRequest+0x238>
     da6:	80 91 21 01 	lds	r24, 0x0121
     daa:	81 32       	cpi	r24, 0x21	; 33
     dac:	81 f5       	brne	.+96     	; 0xe0e <HID_Device_ProcessControlRequest+0x238>
     dae:	80 91 e8 00 	lds	r24, 0x00E8
     db2:	87 7f       	andi	r24, 0xF7	; 247
     db4:	80 93 e8 00 	sts	0x00E8, r24
     db8:	4a dc       	rcall	.-1900   	; 0x64e <Endpoint_ClearStatusStage>
     dba:	80 91 23 01 	lds	r24, 0x0123
     dbe:	90 91 24 01 	lds	r25, 0x0124
     dc2:	80 70       	andi	r24, 0x00	; 0
     dc4:	36 e0       	ldi	r19, 0x06	; 6
			break;
		case HID_REQ_SetIdle:
			if (USB_ControlRequest.bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_CLASS | REQREC_INTERFACE))
			{
				Endpoint_ClearSETUP();
				Endpoint_ClearStatusStage();
     dc6:	96 95       	lsr	r25
     dc8:	87 95       	ror	r24

				HIDInterfaceInfo->State.IdleCount = ((USB_ControlRequest.wValue & 0xFF00) >> 6);
     dca:	3a 95       	dec	r19
     dcc:	e1 f7       	brne	.-8      	; 0xdc6 <HID_Device_ProcessControlRequest+0x1f0>
     dce:	f7 01       	movw	r30, r14
     dd0:	95 87       	std	Z+13, r25	; 0x0d
     dd2:	84 87       	std	Z+12, r24	; 0x0c
     dd4:	1c c0       	rjmp	.+56     	; 0xe0e <HID_Device_ProcessControlRequest+0x238>
     dd6:	80 91 21 01 	lds	r24, 0x0121
     dda:	81 3a       	cpi	r24, 0xA1	; 161
     ddc:	c1 f4       	brne	.+48     	; 0xe0e <HID_Device_ProcessControlRequest+0x238>
     dde:	80 91 e8 00 	lds	r24, 0x00E8
     de2:	87 7f       	andi	r24, 0xF7	; 247
     de4:	80 93 e8 00 	sts	0x00E8, r24
     de8:	80 91 e8 00 	lds	r24, 0x00E8
     dec:	80 ff       	sbrs	r24, 0
     dee:	fc cf       	rjmp	.-8      	; 0xde8 <HID_Device_ProcessControlRequest+0x212>
     df0:	f7 01       	movw	r30, r14
     df2:	84 85       	ldd	r24, Z+12	; 0x0c
     df4:	95 85       	ldd	r25, Z+13	; 0x0d
     df6:	96 95       	lsr	r25
     df8:	87 95       	ror	r24
     dfa:	96 95       	lsr	r25
			break;
		case HID_REQ_GetIdle:
			if (USB_ControlRequest.bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_CLASS | REQREC_INTERFACE))
			{
				Endpoint_ClearSETUP();
				while (!(Endpoint_IsINReady()));
     dfc:	87 95       	ror	r24
     dfe:	80 93 f1 00 	sts	0x00F1, r24
     e02:	80 91 e8 00 	lds	r24, 0x00E8
     e06:	8e 77       	andi	r24, 0x7E	; 126
     e08:	80 93 e8 00 	sts	0x00E8, r24
     e0c:	20 dc       	rcall	.-1984   	; 0x64e <Endpoint_ClearStatusStage>
			 *  \param[in] Data  Data to write into the the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_8(const uint8_t Data) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_8(const uint8_t Data)
			{
				UEDATX = Data;
     e0e:	0f b6       	in	r0, 0x3f	; 63
     e10:	f8 94       	cli
     e12:	7e be       	out	0x3e, r7	; 62
     e14:	0f be       	out	0x3f, r0	; 63
     e16:	6d be       	out	0x3d, r6	; 61
     e18:	0f 90       	pop	r0
     e1a:	0f 90       	pop	r0
				Endpoint_Write_8(HIDInterfaceInfo->State.IdleCount >> 2);
				Endpoint_ClearIN();
				Endpoint_ClearStatusStage();
     e1c:	0f 90       	pop	r0
     e1e:	df 91       	pop	r29
			}

			break;
	}
}
     e20:	cf 91       	pop	r28
     e22:	1f 91       	pop	r17
     e24:	0f 91       	pop	r16
     e26:	ff 90       	pop	r15
     e28:	ef 90       	pop	r14
     e2a:	df 90       	pop	r13
     e2c:	cf 90       	pop	r12
     e2e:	bf 90       	pop	r11
     e30:	af 90       	pop	r10
     e32:	9f 90       	pop	r9
     e34:	8f 90       	pop	r8
     e36:	7f 90       	pop	r7
     e38:	6f 90       	pop	r6
     e3a:	08 95       	ret

00000e3c <HID_Device_ConfigureEndpoints>:

bool HID_Device_ConfigureEndpoints(USB_ClassInfo_HID_Device_t* const HIDInterfaceInfo)
{
     e3c:	cf 93       	push	r28
     e3e:	df 93       	push	r29
     e40:	fc 01       	movw	r30, r24
	memset(&HIDInterfaceInfo->State, 0x00, sizeof(HIDInterfaceInfo->State));
     e42:	09 96       	adiw	r24, 0x09	; 9
     e44:	dc 01       	movw	r26, r24
     e46:	87 e0       	ldi	r24, 0x07	; 7
     e48:	ed 01       	movw	r28, r26
     e4a:	19 92       	st	Y+, r1
     e4c:	8a 95       	dec	r24
     e4e:	e9 f7       	brne	.-6      	; 0xe4a <HID_Device_ConfigureEndpoints+0xe>
	HIDInterfaceInfo->State.UsingReportProtocol = true;
     e50:	81 e0       	ldi	r24, 0x01	; 1
     e52:	81 87       	std	Z+9, r24	; 0x09
	HIDInterfaceInfo->State.IdleCount           = 500;
     e54:	84 ef       	ldi	r24, 0xF4	; 244
     e56:	91 e0       	ldi	r25, 0x01	; 1
     e58:	95 87       	std	Z+13, r25	; 0x0d
     e5a:	84 87       	std	Z+12, r24	; 0x0c

	HIDInterfaceInfo->Config.ReportINEndpoint.Type = EP_TYPE_INTERRUPT;
     e5c:	83 e0       	ldi	r24, 0x03	; 3
     e5e:	84 83       	std	Z+4, r24	; 0x04

	if (!(Endpoint_ConfigureEndpointTable(&HIDInterfaceInfo->Config.ReportINEndpoint, 1)))
     e60:	cf 01       	movw	r24, r30
     e62:	01 96       	adiw	r24, 0x01	; 1
     e64:	61 e0       	ldi	r22, 0x01	; 1
     e66:	b7 db       	rcall	.-2194   	; 0x5d6 <Endpoint_ConfigureEndpointTable>
     e68:	df 91       	pop	r29
	  return false;	
	
	return true;
}
     e6a:	cf 91       	pop	r28
     e6c:	08 95       	ret

00000e6e <HID_Device_USBTask>:

void HID_Device_USBTask(USB_ClassInfo_HID_Device_t* const HIDInterfaceInfo)
{
     e6e:	4f 92       	push	r4
     e70:	5f 92       	push	r5
     e72:	6f 92       	push	r6
     e74:	7f 92       	push	r7
     e76:	8f 92       	push	r8
     e78:	9f 92       	push	r9
     e7a:	af 92       	push	r10
     e7c:	bf 92       	push	r11
     e7e:	cf 92       	push	r12
     e80:	df 92       	push	r13
     e82:	ef 92       	push	r14
     e84:	ff 92       	push	r15
     e86:	0f 93       	push	r16
     e88:	1f 93       	push	r17
     e8a:	cf 93       	push	r28
     e8c:	df 93       	push	r29
     e8e:	00 d0       	rcall	.+0      	; 0xe90 <HID_Device_USBTask+0x22>
     e90:	0f 92       	push	r0
     e92:	cd b7       	in	r28, 0x3d	; 61
     e94:	de b7       	in	r29, 0x3e	; 62
     e96:	7c 01       	movw	r14, r24
			Endpoint_ClearIN();
		}
		
		HIDInterfaceInfo->State.PrevFrameNum = USB_Device_GetFrameNumber();
	}
}
     e98:	4d b6       	in	r4, 0x3d	; 61
     e9a:	5e b6       	in	r5, 0x3e	; 62
	return true;
}

void HID_Device_USBTask(USB_ClassInfo_HID_Device_t* const HIDInterfaceInfo)
{
	if (USB_DeviceState != DEVICE_STATE_Configured)
     e9c:	80 91 20 01 	lds	r24, 0x0120
     ea0:	84 30       	cpi	r24, 0x04	; 4
     ea2:	09 f0       	breq	.+2      	; 0xea6 <HID_Device_USBTask+0x38>
     ea4:	91 c0       	rjmp	.+290    	; 0xfc8 <HID_Device_USBTask+0x15a>
			 *  \return Current USB frame number from the USB controller.
			 */
			static inline uint16_t USB_Device_GetFrameNumber(void) ATTR_ALWAYS_INLINE ATTR_WARN_UNUSED_RESULT;
			static inline uint16_t USB_Device_GetFrameNumber(void)
			{
				return UDFNUM;
     ea6:	80 91 e4 00 	lds	r24, 0x00E4
     eaa:	90 91 e5 00 	lds	r25, 0x00E5
	  return;

	if (HIDInterfaceInfo->State.PrevFrameNum == USB_Device_GetFrameNumber())
     eae:	f7 01       	movw	r30, r14
     eb0:	22 85       	ldd	r18, Z+10	; 0x0a
     eb2:	33 85       	ldd	r19, Z+11	; 0x0b
     eb4:	28 17       	cp	r18, r24
     eb6:	39 07       	cpc	r19, r25
     eb8:	09 f4       	brne	.+2      	; 0xebc <HID_Device_USBTask+0x4e>
     eba:	86 c0       	rjmp	.+268    	; 0xfc8 <HID_Device_USBTask+0x15a>
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
     ebc:	81 81       	ldd	r24, Z+1	; 0x01
     ebe:	8f 70       	andi	r24, 0x0F	; 15
     ec0:	80 93 e9 00 	sts	0x00E9, r24
			 *          on its direction.
			 */
			static inline bool Endpoint_IsReadWriteAllowed(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsReadWriteAllowed(void)
			{
				return ((UEINTX & (1 << RWAL)) ? true : false);
     ec4:	80 91 e8 00 	lds	r24, 0x00E8
	  return;
	  
	Endpoint_SelectEndpoint(HIDInterfaceInfo->Config.ReportINEndpoint.Address);

	if (Endpoint_IsReadWriteAllowed())
     ec8:	85 ff       	sbrs	r24, 5
     eca:	7e c0       	rjmp	.+252    	; 0xfc8 <HID_Device_USBTask+0x15a>
     ecc:	7d b6       	in	r7, 0x3d	; 61
     ece:	6e b6       	in	r6, 0x3e	; 62
	{
		uint8_t  ReportINData[HIDInterfaceInfo->Config.PrevReportINBufferSize];
     ed0:	40 85       	ldd	r20, Z+8	; 0x08
     ed2:	8d b7       	in	r24, 0x3d	; 61
     ed4:	9e b7       	in	r25, 0x3e	; 62
     ed6:	84 1b       	sub	r24, r20
     ed8:	91 09       	sbc	r25, r1
     eda:	0f b6       	in	r0, 0x3f	; 63
     edc:	f8 94       	cli
     ede:	9e bf       	out	0x3e, r25	; 62
     ee0:	0f be       	out	0x3f, r0	; 63
     ee2:	8d bf       	out	0x3d, r24	; 61
     ee4:	0d b7       	in	r16, 0x3d	; 61
     ee6:	1e b7       	in	r17, 0x3e	; 62
     ee8:	0f 5f       	subi	r16, 0xFF	; 255
     eea:	1f 4f       	sbci	r17, 0xFF	; 255
		uint8_t  ReportID     = 0;
     eec:	19 82       	std	Y+1, r1	; 0x01
		uint16_t ReportINSize = 0;
     eee:	1b 82       	std	Y+3, r1	; 0x03
     ef0:	1a 82       	std	Y+2, r1	; 0x02

		memset(ReportINData, 0, sizeof(ReportINData));
     ef2:	b0 2e       	mov	r11, r16
     ef4:	a1 2e       	mov	r10, r17
     ef6:	c8 01       	movw	r24, r16
     ef8:	60 e0       	ldi	r22, 0x00	; 0
     efa:	70 e0       	ldi	r23, 0x00	; 0
     efc:	50 e0       	ldi	r21, 0x00	; 0
     efe:	39 d2       	rcall	.+1138   	; 0x1372 <memset>
     f00:	c7 01       	movw	r24, r14

		bool ForceSend         = CALLBACK_HID_Device_CreateHIDReport(HIDInterfaceInfo, &ReportID, HID_REPORT_ITEM_In,
     f02:	be 01       	movw	r22, r28
     f04:	6f 5f       	subi	r22, 0xFF	; 255
     f06:	7f 4f       	sbci	r23, 0xFF	; 255
     f08:	40 e0       	ldi	r20, 0x00	; 0
     f0a:	98 01       	movw	r18, r16
     f0c:	8e 01       	movw	r16, r28
     f0e:	0e 5f       	subi	r16, 0xFE	; 254
     f10:	1f 4f       	sbci	r17, 0xFF	; 255
     f12:	13 d1       	rcall	.+550    	; 0x113a <CALLBACK_HID_Device_CreateHIDReport>
     f14:	18 2f       	mov	r17, r24
     f16:	f7 01       	movw	r30, r14
     f18:	84 85       	ldd	r24, Z+12	; 0x0c
		                                                             ReportINData, &ReportINSize);
		bool StatesChanged     = false;
		bool IdlePeriodElapsed = (HIDInterfaceInfo->State.IdleCount && !(HIDInterfaceInfo->State.IdleMSRemaining));
     f1a:	95 85       	ldd	r25, Z+13	; 0x0d
     f1c:	00 97       	sbiw	r24, 0x00	; 0
     f1e:	59 f0       	breq	.+22     	; 0xf36 <HID_Device_USBTask+0xc8>
     f20:	81 e0       	ldi	r24, 0x01	; 1
     f22:	90 e0       	ldi	r25, 0x00	; 0
	  return false;	
	
	return true;
}

void HID_Device_USBTask(USB_ClassInfo_HID_Device_t* const HIDInterfaceInfo)
     f24:	26 85       	ldd	r18, Z+14	; 0x0e
     f26:	37 85       	ldd	r19, Z+15	; 0x0f
     f28:	21 15       	cp	r18, r1
     f2a:	31 05       	cpc	r19, r1
     f2c:	11 f0       	breq	.+4      	; 0xf32 <HID_Device_USBTask+0xc4>
     f2e:	80 e0       	ldi	r24, 0x00	; 0
     f30:	90 e0       	ldi	r25, 0x00	; 0
     f32:	4c 01       	movw	r8, r24
     f34:	02 c0       	rjmp	.+4      	; 0xf3a <HID_Device_USBTask+0xcc>
		memset(ReportINData, 0, sizeof(ReportINData));

		bool ForceSend         = CALLBACK_HID_Device_CreateHIDReport(HIDInterfaceInfo, &ReportID, HID_REPORT_ITEM_In,
		                                                             ReportINData, &ReportINSize);
		bool StatesChanged     = false;
		bool IdlePeriodElapsed = (HIDInterfaceInfo->State.IdleCount && !(HIDInterfaceInfo->State.IdleMSRemaining));
     f36:	88 24       	eor	r8, r8
     f38:	99 24       	eor	r9, r9
     f3a:	f7 01       	movw	r30, r14
     f3c:	c6 80       	ldd	r12, Z+6	; 0x06

		if (HIDInterfaceInfo->Config.PrevReportINBuffer != NULL)
     f3e:	d7 80       	ldd	r13, Z+7	; 0x07
     f40:	c1 14       	cp	r12, r1
     f42:	d1 04       	cpc	r13, r1
     f44:	91 f0       	breq	.+36     	; 0xf6a <HID_Device_USBTask+0xfc>
     f46:	4a 81       	ldd	r20, Y+2	; 0x02
     f48:	5b 81       	ldd	r21, Y+3	; 0x03
		{
			StatesChanged = (memcmp(ReportINData, HIDInterfaceInfo->Config.PrevReportINBuffer, ReportINSize) != 0);
     f4a:	8b 2d       	mov	r24, r11
     f4c:	9a 2d       	mov	r25, r10
     f4e:	b6 01       	movw	r22, r12
     f50:	fa d1       	rcall	.+1012   	; 0x1346 <memcmp>
     f52:	01 e0       	ldi	r16, 0x01	; 1
     f54:	00 97       	sbiw	r24, 0x00	; 0
     f56:	09 f4       	brne	.+2      	; 0xf5a <HID_Device_USBTask+0xec>
     f58:	00 e0       	ldi	r16, 0x00	; 0
     f5a:	f7 01       	movw	r30, r14
     f5c:	40 85       	ldd	r20, Z+8	; 0x08
     f5e:	c6 01       	movw	r24, r12
			memcpy(HIDInterfaceInfo->Config.PrevReportINBuffer, ReportINData, HIDInterfaceInfo->Config.PrevReportINBufferSize);
     f60:	6b 2d       	mov	r22, r11
     f62:	7a 2d       	mov	r23, r10
     f64:	50 e0       	ldi	r21, 0x00	; 0
     f66:	fc d1       	rcall	.+1016   	; 0x1360 <memcpy>
     f68:	01 c0       	rjmp	.+2      	; 0xf6c <HID_Device_USBTask+0xfe>
     f6a:	00 e0       	ldi	r16, 0x00	; 0
     f6c:	8a 81       	ldd	r24, Y+2	; 0x02
     f6e:	9b 81       	ldd	r25, Y+3	; 0x03
     f70:	00 97       	sbiw	r24, 0x00	; 0

		memset(ReportINData, 0, sizeof(ReportINData));

		bool ForceSend         = CALLBACK_HID_Device_CreateHIDReport(HIDInterfaceInfo, &ReportID, HID_REPORT_ITEM_In,
		                                                             ReportINData, &ReportINSize);
		bool StatesChanged     = false;
     f72:	09 f1       	breq	.+66     	; 0xfb6 <HID_Device_USBTask+0x148>
		{
			StatesChanged = (memcmp(ReportINData, HIDInterfaceInfo->Config.PrevReportINBuffer, ReportINSize) != 0);
			memcpy(HIDInterfaceInfo->Config.PrevReportINBuffer, ReportINData, HIDInterfaceInfo->Config.PrevReportINBufferSize);
		}

		if (ReportINSize && (ForceSend || StatesChanged || IdlePeriodElapsed))
     f74:	11 23       	and	r17, r17
     f76:	29 f4       	brne	.+10     	; 0xf82 <HID_Device_USBTask+0x114>
     f78:	00 23       	and	r16, r16
     f7a:	19 f4       	brne	.+6      	; 0xf82 <HID_Device_USBTask+0x114>
     f7c:	81 14       	cp	r8, r1
     f7e:	91 04       	cpc	r9, r1
     f80:	d1 f0       	breq	.+52     	; 0xfb6 <HID_Device_USBTask+0x148>
     f82:	f7 01       	movw	r30, r14
     f84:	84 85       	ldd	r24, Z+12	; 0x0c
     f86:	95 85       	ldd	r25, Z+13	; 0x0d
     f88:	97 87       	std	Z+15, r25	; 0x0f
		{
			HIDInterfaceInfo->State.IdleMSRemaining = HIDInterfaceInfo->State.IdleCount;
     f8a:	86 87       	std	Z+14, r24	; 0x0e
     f8c:	81 81       	ldd	r24, Z+1	; 0x01
     f8e:	8f 70       	andi	r24, 0x0F	; 15
     f90:	80 93 e9 00 	sts	0x00E9, r24
     f94:	89 81       	ldd	r24, Y+1	; 0x01
     f96:	88 23       	and	r24, r24
     f98:	11 f0       	breq	.+4      	; 0xf9e <HID_Device_USBTask+0x130>
     f9a:	80 93 f1 00 	sts	0x00F1, r24
     f9e:	6a 81       	ldd	r22, Y+2	; 0x02
     fa0:	7b 81       	ldd	r23, Y+3	; 0x03
     fa2:	8b 2d       	mov	r24, r11
     fa4:	9a 2d       	mov	r25, r10
			Endpoint_SelectEndpoint(HIDInterfaceInfo->Config.ReportINEndpoint.Address);

			if (ReportID)
			  Endpoint_Write_8(ReportID);

			Endpoint_Write_Stream_LE(ReportINData, ReportINSize, NULL);
     fa6:	40 e0       	ldi	r20, 0x00	; 0
     fa8:	50 e0       	ldi	r21, 0x00	; 0
     faa:	7e d9       	rcall	.-3332   	; 0x2a8 <Endpoint_Write_Stream_LE>
     fac:	80 91 e8 00 	lds	r24, 0x00E8
     fb0:	8e 77       	andi	r24, 0x7E	; 126
     fb2:	80 93 e8 00 	sts	0x00E8, r24
     fb6:	80 91 e4 00 	lds	r24, 0x00E4
     fba:	90 91 e5 00 	lds	r25, 0x00E5
     fbe:	f7 01       	movw	r30, r14
     fc0:	93 87       	std	Z+11, r25	; 0x0b
     fc2:	82 87       	std	Z+10, r24	; 0x0a
     fc4:	7d be       	out	0x3d, r7	; 61
     fc6:	6e be       	out	0x3e, r6	; 62

			Endpoint_ClearIN();
		}
		
		HIDInterfaceInfo->State.PrevFrameNum = USB_Device_GetFrameNumber();
     fc8:	0f b6       	in	r0, 0x3f	; 63
     fca:	f8 94       	cli
     fcc:	5e be       	out	0x3e, r5	; 62
     fce:	0f be       	out	0x3f, r0	; 63
     fd0:	4d be       	out	0x3d, r4	; 61
	}
}
     fd2:	0f 90       	pop	r0
     fd4:	0f 90       	pop	r0
     fd6:	0f 90       	pop	r0
     fd8:	df 91       	pop	r29
     fda:	cf 91       	pop	r28
     fdc:	1f 91       	pop	r17
     fde:	0f 91       	pop	r16
     fe0:	ff 90       	pop	r15
     fe2:	ef 90       	pop	r14
     fe4:	df 90       	pop	r13
     fe6:	cf 90       	pop	r12
     fe8:	bf 90       	pop	r11
     fea:	af 90       	pop	r10
     fec:	9f 90       	pop	r9
     fee:	8f 90       	pop	r8
     ff0:	7f 90       	pop	r7
     ff2:	6f 90       	pop	r6
     ff4:	5f 90       	pop	r5
     ff6:	4f 90       	pop	r4
     ff8:	08 95       	ret

00000ffa <RingBuffer_Remove.constprop.2>:
		 *
		 *  \return Next data element stored in the buffer
		 */
		static inline RingBuff_Data_t RingBuffer_Remove(RingBuff_t* const Buffer)
		{
			RingBuff_Data_t Data = *Buffer->Out;
     ffa:	e0 91 b7 01 	lds	r30, 0x01B7
     ffe:	f0 91 b8 01 	lds	r31, 0x01B8
    1002:	81 91       	ld	r24, Z+
			
			if (++Buffer->Out == &Buffer->Buffer[BUFFER_SIZE])
    1004:	f0 93 b8 01 	sts	0x01B8, r31
    1008:	e0 93 b7 01 	sts	0x01B7, r30
    100c:	91 e0       	ldi	r25, 0x01	; 1
    100e:	e5 3b       	cpi	r30, 0xB5	; 181
    1010:	f9 07       	cpc	r31, r25
    1012:	31 f4       	brne	.+12     	; 0x1020 <RingBuffer_Remove.constprop.2+0x26>
			  Buffer->Out = Buffer->Buffer;
    1014:	25 e3       	ldi	r18, 0x35	; 53
    1016:	31 e0       	ldi	r19, 0x01	; 1
    1018:	30 93 b8 01 	sts	0x01B8, r19
    101c:	20 93 b7 01 	sts	0x01B7, r18

			ATOMIC_BLOCK(ATOMIC_RESTORESTATE)
    1020:	2f b7       	in	r18, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
    1022:	f8 94       	cli
			{
				Buffer->Count--;
    1024:	90 91 b9 01 	lds	r25, 0x01B9
    1028:	91 50       	subi	r25, 0x01	; 1
    102a:	90 93 b9 01 	sts	0x01B9, r25
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
    102e:	2f bf       	out	0x3f, r18	; 63
			}
			
			return Data;
		}
    1030:	08 95       	ret

00001032 <SetupHardware>:
    }
}

/** Configures the board hardware and chip peripherals for the demo's functionality. */
void SetupHardware(void)
{
    1032:	cf 93       	push	r28
    1034:	df 93       	push	r29
    /* Disable watchdog if enabled by bootloader/fuses */
    MCUSR &= ~(1 << WDRF);
    1036:	84 b7       	in	r24, 0x34	; 52
    1038:	87 7f       	andi	r24, 0xF7	; 247
    103a:	84 bf       	out	0x34, r24	; 52
    wdt_disable();
    103c:	28 e1       	ldi	r18, 0x18	; 24
    103e:	0f b6       	in	r0, 0x3f	; 63
    1040:	f8 94       	cli
    1042:	20 93 60 00 	sts	0x0060, r18
    1046:	10 92 60 00 	sts	0x0060, r1
    104a:	0f be       	out	0x3f, r0	; 63
			 *  \param[in] DoubleSpeed  Enables double speed mode when set, halving the sample time to double the baud rate.
			 */
			static inline void Serial_Init(const uint32_t BaudRate,
			                               const bool DoubleSpeed)
			{
				UBRR1  = (DoubleSpeed ? SERIAL_2X_UBBRVAL(BaudRate) : SERIAL_UBBRVAL(BaudRate));
    104c:	80 e1       	ldi	r24, 0x10	; 16
    104e:	90 e0       	ldi	r25, 0x00	; 0
    1050:	90 93 cd 00 	sts	0x00CD, r25
    1054:	80 93 cc 00 	sts	0x00CC, r24

				UCSR1C = ((1 << UCSZ11) | (1 << UCSZ10));
    1058:	86 e0       	ldi	r24, 0x06	; 6
    105a:	80 93 ca 00 	sts	0x00CA, r24
				UCSR1A = (DoubleSpeed ? (1 << U2X1) : 0);
    105e:	82 e0       	ldi	r24, 0x02	; 2
    1060:	80 93 c8 00 	sts	0x00C8, r24
				UCSR1B = ((1 << TXEN1)  | (1 << RXEN1));
    1064:	c9 ec       	ldi	r28, 0xC9	; 201
    1066:	d0 e0       	ldi	r29, 0x00	; 0
    1068:	28 83       	st	Y, r18

				DDRD  |= (1 << 3);
    106a:	53 9a       	sbi	0x0a, 3	; 10
				PORTD |= (1 << 2);
    106c:	5a 9a       	sbi	0x0b, 2	; 11

		/* Inline Functions: */
		#if !defined(__DOXYGEN__)
			static inline void LEDs_Init(void)
			{
				DDRD  |= LEDS_ALL_LEDS;
    106e:	8a b1       	in	r24, 0x0a	; 10
    1070:	80 63       	ori	r24, 0x30	; 48
    1072:	8a b9       	out	0x0a, r24	; 10
				PORTD |= LEDS_ALL_LEDS;
    1074:	8b b1       	in	r24, 0x0b	; 11
    1076:	80 63       	ori	r24, 0x30	; 48
    1078:	8b b9       	out	0x0b, r24	; 11

    /* Hardware Initialization */
    Serial_Init(115200, true);
    LEDs_Init();
    USB_Init();
    107a:	76 db       	rcall	.-2324   	; 0x768 <USB_Init>
    107c:	88 e9       	ldi	r24, 0x98	; 152

    UCSR1B = ((1 << RXCIE1) | (1 << TXEN1) | (1 << RXEN1));
    107e:	88 83       	st	Y, r24
    1080:	df 91       	pop	r29
}
    1082:	cf 91       	pop	r28
    1084:	08 95       	ret

00001086 <main>:
/** Main program entry point. This routine configures the hardware required by the application, then
 *  enters a loop to run the application tasks in sequence.
 */
int main(void)
{
    SetupHardware();
    1086:	d5 df       	rcall	.-86     	; 0x1032 <SetupHardware>
    1088:	2f b7       	in	r18, 0x3f	; 63
    108a:	f8 94       	cli
    108c:	85 e3       	ldi	r24, 0x35	; 53
		 */
		static inline void RingBuffer_InitBuffer(RingBuff_t* const Buffer)
		{
			ATOMIC_BLOCK(ATOMIC_RESTORESTATE)
			{
				Buffer->In  = Buffer->Buffer;
    108e:	91 e0       	ldi	r25, 0x01	; 1
    1090:	90 93 b6 01 	sts	0x01B6, r25
    1094:	80 93 b5 01 	sts	0x01B5, r24
    1098:	90 93 b8 01 	sts	0x01B8, r25
				Buffer->Out = Buffer->Buffer;
    109c:	80 93 b7 01 	sts	0x01B7, r24
    10a0:	2f bf       	out	0x3f, r18	; 63
    10a2:	78 94       	sei

    RingBuffer_InitBuffer(&USARTtoUSB_Buffer);

    sei();
    10a4:	88 e0       	ldi	r24, 0x08	; 8

    for (;;) 
    {
		HID_Device_USBTask(&Surface_HID_Interface);
    10a6:	91 e0       	ldi	r25, 0x01	; 1
    10a8:	e2 de       	rcall	.-572    	; 0xe6e <HID_Device_USBTask>
    10aa:	79 dd       	rcall	.-1294   	; 0xb9e <USB_USBTask>
    10ac:	80 91 1a 01 	lds	r24, 0x011A
		USB_USBTask();
    10b0:	90 91 1b 01 	lds	r25, 0x011B
	
		/* Turn off the Tx LED when the tick count reaches zero */
		if (led1_ticks) 
    10b4:	00 97       	sbiw	r24, 0x00	; 0
    10b6:	81 f0       	breq	.+32     	; 0x10d8 <main+0x52>
    10b8:	80 91 1a 01 	lds	r24, 0x011A
    10bc:	90 91 1b 01 	lds	r25, 0x011B
		{
			led1_ticks--;
    10c0:	01 97       	sbiw	r24, 0x01	; 1
    10c2:	90 93 1b 01 	sts	0x011B, r25
    10c6:	80 93 1a 01 	sts	0x011A, r24
    10ca:	80 91 1a 01 	lds	r24, 0x011A
    10ce:	90 91 1b 01 	lds	r25, 0x011B
			if (led1_ticks == 0) 
    10d2:	00 97       	sbiw	r24, 0x00	; 0
    10d4:	09 f4       	brne	.+2      	; 0x10d8 <main+0x52>
    10d6:	5d 9a       	sbi	0x0b, 5	; 11
    10d8:	80 91 18 01 	lds	r24, 0x0118
    10dc:	90 91 19 01 	lds	r25, 0x0119
				LEDs_TurnOffLEDs(LEDS_LED1);
			}
		}
		
		/* Turn off the Rx LED when the tick count reaches zero */
		if (led2_ticks) 
    10e0:	00 97       	sbiw	r24, 0x00	; 0
    10e2:	01 f3       	breq	.-64     	; 0x10a4 <main+0x1e>
    10e4:	80 91 18 01 	lds	r24, 0x0118
    10e8:	90 91 19 01 	lds	r25, 0x0119
		{
			led2_ticks--;
    10ec:	01 97       	sbiw	r24, 0x01	; 1
    10ee:	90 93 19 01 	sts	0x0119, r25
    10f2:	80 93 18 01 	sts	0x0118, r24
    10f6:	80 91 18 01 	lds	r24, 0x0118
    10fa:	90 91 19 01 	lds	r25, 0x0119
			if (led2_ticks == 0) 
    10fe:	00 97       	sbiw	r24, 0x00	; 0
    1100:	89 f6       	brne	.-94     	; 0x10a4 <main+0x1e>
    1102:	5c 9a       	sbi	0x0b, 4	; 11
    1104:	cf cf       	rjmp	.-98     	; 0x10a4 <main+0x1e>

00001106 <EVENT_USB_Device_Connect>:

/** Event handler for the library USB Connection event. */
void EVENT_USB_Device_Connect(void)
{
	//LEDs_SetAllLEDs(LEDMASK_USB_ENUMERATING);
}
    1106:	08 95       	ret

00001108 <EVENT_USB_Device_Disconnect>:

/** Event handler for the library USB Disconnection event. */
void EVENT_USB_Device_Disconnect(void)
{
}
    1108:	08 95       	ret

0000110a <EVENT_USB_Device_ConfigurationChanged>:

/** Event handler for the library USB Configuration Changed event. */
void EVENT_USB_Device_ConfigurationChanged(void)
{
    HID_Device_ConfigureEndpoints(&Surface_HID_Interface);
    110a:	88 e0       	ldi	r24, 0x08	; 8
    110c:	91 e0       	ldi	r25, 0x01	; 1
    110e:	96 de       	rcall	.-724    	; 0xe3c <HID_Device_ConfigureEndpoints>
    1110:	e2 ee       	ldi	r30, 0xE2	; 226
						break;
					case USB_INT_EORSTI:
						UDIEN  |= (1 << EORSTE);
						break;
					case USB_INT_SOFI:
						UDIEN  |= (1 << SOFE);
    1112:	f0 e0       	ldi	r31, 0x00	; 0
    1114:	80 81       	ld	r24, Z
    1116:	84 60       	ori	r24, 0x04	; 4
    1118:	80 83       	st	Z, r24
    111a:	08 95       	ret

0000111c <EVENT_USB_Device_ControlRequest>:
}

/** Event handler for the library USB Control Request reception event. */
void EVENT_USB_Device_ControlRequest(void)
{
	HID_Device_ProcessControlRequest(&Surface_HID_Interface);
    111c:	88 e0       	ldi	r24, 0x08	; 8
    111e:	91 e0       	ldi	r25, 0x01	; 1
    1120:	5a cd       	rjmp	.-1356   	; 0xbd6 <HID_Device_ProcessControlRequest>

00001122 <EVENT_USB_Device_StartOfFrame>:
			 *  \param[in,out] HIDInterfaceInfo  Pointer to a structure containing a HID Class configuration and state.
			 */
			static inline void HID_Device_MillisecondElapsed(USB_ClassInfo_HID_Device_t* const HIDInterfaceInfo) ATTR_ALWAYS_INLINE ATTR_NON_NULL_PTR_ARG(1);
			static inline void HID_Device_MillisecondElapsed(USB_ClassInfo_HID_Device_t* const HIDInterfaceInfo)
			{
				if (HIDInterfaceInfo->State.IdleMSRemaining)
    1122:	80 91 16 01 	lds	r24, 0x0116
    1126:	90 91 17 01 	lds	r25, 0x0117
    112a:	00 97       	sbiw	r24, 0x00	; 0
    112c:	29 f0       	breq	.+10     	; 0x1138 <EVENT_USB_Device_StartOfFrame+0x16>
				  HIDInterfaceInfo->State.IdleMSRemaining--;
    112e:	01 97       	sbiw	r24, 0x01	; 1
    1130:	90 93 17 01 	sts	0x0117, r25
    1134:	80 93 16 01 	sts	0x0116, r24
    1138:	08 95       	ret

0000113a <CALLBACK_HID_Device_CreateHIDReport>:
    USB_ClassInfo_HID_Device_t* const HIDInterfaceInfo,
    uint8_t* const ReportID,
    const uint8_t ReportType,
    void* ReportData,
    uint16_t* const ReportSize)
{
    113a:	8f 92       	push	r8
    113c:	9f 92       	push	r9
    113e:	af 92       	push	r10
    1140:	bf 92       	push	r11
    1142:	cf 92       	push	r12
    1144:	df 92       	push	r13
    1146:	ef 92       	push	r14
    1148:	ff 92       	push	r15
    114a:	0f 93       	push	r16
    114c:	1f 93       	push	r17
    114e:	cf 93       	push	r28
    1150:	df 93       	push	r29
    1152:	e9 01       	movw	r28, r18
    1154:	58 01       	movw	r10, r16
	if (ReportData != NULL && ReportSize != NULL)
    1156:	20 97       	sbiw	r28, 0x00	; 0
    1158:	09 f4       	brne	.+2      	; 0x115c <CALLBACK_HID_Device_CreateHIDReport+0x22>
    115a:	69 c0       	rjmp	.+210    	; 0x122e <CALLBACK_HID_Device_CreateHIDReport+0xf4>
	{
		if (ReportType == HID_REPORT_ITEM_Feature && *ReportID == 0x44)
    115c:	42 30       	cpi	r20, 0x02	; 2
    115e:	b1 f4       	brne	.+44     	; 0x118c <CALLBACK_HID_Device_CreateHIDReport+0x52>
    1160:	fb 01       	movw	r30, r22
    1162:	80 81       	ld	r24, Z
    1164:	84 34       	cpi	r24, 0x44	; 68
    1166:	61 f4       	brne	.+24     	; 0x1180 <CALLBACK_HID_Device_CreateHIDReport+0x46>
		{
			uint8_t *reportp = ReportData;
			uint8_t id = *ReportID;

			*reportp++ = id;			
    1168:	89 93       	st	Y+, r24

			memcpy(reportp, TouchBlob,
    116a:	e4 e7       	ldi	r30, 0x74	; 116
    116c:	f0 e0       	ldi	r31, 0x00	; 0
    116e:	80 e0       	ldi	r24, 0x00	; 0
    1170:	91 e0       	ldi	r25, 0x01	; 1
    1172:	01 90       	ld	r0, Z+
    1174:	09 92       	st	Y+, r0
    1176:	01 97       	sbiw	r24, 0x01	; 1
    1178:	e1 f7       	brne	.-8      	; 0x1172 <CALLBACK_HID_Device_CreateHIDReport+0x38>
					       sizeof(TouchBlob));

			*ReportSize = sizeof(TouchBlob) + 1;
    117a:	81 e0       	ldi	r24, 0x01	; 1
    117c:	91 e0       	ldi	r25, 0x01	; 1
    117e:	44 c0       	rjmp	.+136    	; 0x1208 <CALLBACK_HID_Device_CreateHIDReport+0xce>
			USB_SurfaceReport_Feature_t *reportp = (USB_SurfaceReport_Feature_t*)ReportData;
			uint8_t maximumContactCount;
			maximumContactCount = 10;
			uint8_t id = *ReportID;

			reportp->ReportId = id;			
    1180:	88 83       	st	Y, r24
			reportp->MaximumContactCount = maximumContactCount;
    1182:	8a e0       	ldi	r24, 0x0A	; 10
    1184:	89 83       	std	Y+1, r24	; 0x01
			
			*ReportSize = sizeof(USB_SurfaceReport_Feature_t);
    1186:	82 e0       	ldi	r24, 0x02	; 2
    1188:	90 e0       	ldi	r25, 0x00	; 0
    118a:	3e c0       	rjmp	.+124    	; 0x1208 <CALLBACK_HID_Device_CreateHIDReport+0xce>
		 */
		static inline RingBuff_Count_t RingBuffer_GetCount(RingBuff_t* const Buffer)
		{
			RingBuff_Count_t Count;
			
			ATOMIC_BLOCK(ATOMIC_RESTORESTATE)
    118c:	9f b7       	in	r25, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
    118e:	f8 94       	cli
			{
				Count = Buffer->Count;
    1190:	80 91 b9 01 	lds	r24, 0x01B9
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
    1194:	9f bf       	out	0x3f, r25	; 63
		{
			USB_SurfaceReport_Data_t *reportp = (USB_SurfaceReport_Data_t*)ReportData;
		
			RingBuff_Count_t BufferCount = RingBuffer_GetCount(&USARTtoUSB_Buffer);
			uint8_t reportId = 1;		
			if (BufferCount >= SURFACE_REPORT_SIZE) 
    1196:	89 30       	cpi	r24, 0x09	; 9
    1198:	08 f4       	brcc	.+2      	; 0x119c <CALLBACK_HID_Device_CreateHIDReport+0x62>
    119a:	3b c0       	rjmp	.+118    	; 0x1212 <CALLBACK_HID_Device_CreateHIDReport+0xd8>
			{
				uint8_t *ptr = ReportData;
				uint8_t TipSwitch = RingBuffer_Remove(&USARTtoUSB_Buffer);
    119c:	2e df       	rcall	.-420    	; 0xffa <RingBuffer_Remove.constprop.2>
    119e:	98 2e       	mov	r9, r24
    11a0:	2c df       	rcall	.-424    	; 0xffa <RingBuffer_Remove.constprop.2>
				uint8_t ContactId = RingBuffer_Remove(&USARTtoUSB_Buffer);
    11a2:	88 2e       	mov	r8, r24
    11a4:	2a df       	rcall	.-428    	; 0xffa <RingBuffer_Remove.constprop.2>
    11a6:	c8 2e       	mov	r12, r24
				uint16_t  X = RingBuffer_Remove(&USARTtoUSB_Buffer) | (RingBuffer_Remove(&USARTtoUSB_Buffer) << 8);
    11a8:	28 df       	rcall	.-432    	; 0xffa <RingBuffer_Remove.constprop.2>
    11aa:	38 2f       	mov	r19, r24
    11ac:	20 e0       	ldi	r18, 0x00	; 0
    11ae:	dd 24       	eor	r13, r13
    11b0:	c2 2a       	or	r12, r18
    11b2:	d3 2a       	or	r13, r19
    11b4:	22 df       	rcall	.-444    	; 0xffa <RingBuffer_Remove.constprop.2>
    11b6:	e8 2e       	mov	r14, r24
    11b8:	20 df       	rcall	.-448    	; 0xffa <RingBuffer_Remove.constprop.2>
    11ba:	38 2f       	mov	r19, r24
				uint16_t  Y = RingBuffer_Remove(&USARTtoUSB_Buffer) | (RingBuffer_Remove(&USARTtoUSB_Buffer) << 8);
    11bc:	20 e0       	ldi	r18, 0x00	; 0
    11be:	ff 24       	eor	r15, r15
    11c0:	e2 2a       	or	r14, r18
    11c2:	f3 2a       	or	r15, r19
    11c4:	1a df       	rcall	.-460    	; 0xffa <RingBuffer_Remove.constprop.2>
    11c6:	08 2f       	mov	r16, r24
    11c8:	18 df       	rcall	.-464    	; 0xffa <RingBuffer_Remove.constprop.2>
    11ca:	38 2f       	mov	r19, r24
    11cc:	20 e0       	ldi	r18, 0x00	; 0
    11ce:	10 e0       	ldi	r17, 0x00	; 0
				uint16_t  ScanTime  = RingBuffer_Remove(&USARTtoUSB_Buffer) | (RingBuffer_Remove(&USARTtoUSB_Buffer) << 8);
    11d0:	02 2b       	or	r16, r18
    11d2:	13 2b       	or	r17, r19
    11d4:	12 df       	rcall	.-476    	; 0xffa <RingBuffer_Remove.constprop.2>
    11d6:	91 e0       	ldi	r25, 0x01	; 1
    11d8:	98 83       	st	Y, r25
    11da:	99 20       	and	r9, r9
    11dc:	11 f0       	breq	.+4      	; 0x11e2 <CALLBACK_HID_Device_CreateHIDReport+0xa8>
    11de:	9f ef       	ldi	r25, 0xFF	; 255
    11e0:	01 c0       	rjmp	.+2      	; 0x11e4 <CALLBACK_HID_Device_CreateHIDReport+0xaa>
    11e2:	90 e0       	ldi	r25, 0x00	; 0
				uint8_t ContactCount = RingBuffer_Remove(&USARTtoUSB_Buffer);
    11e4:	99 83       	std	Y+1, r25	; 0x01
    11e6:	8a 82       	std	Y+2, r8	; 0x02
				*ptr++ = (uint8_t)(ScanTime & 0xff);
				*ptr++ = (uint8_t)((ScanTime >> 8) & 0xff);
				*ptr++ = ContactCount;
				
				*/
				reportp->ReportId = reportId;
    11e8:	18 87       	std	Y+8, r17	; 0x08
    11ea:	0f 83       	std	Y+7, r16	; 0x07
				reportp->TipSwitch = (TipSwitch > 0) ? 0xff : 0 ;
    11ec:	dc 82       	std	Y+4, r13	; 0x04
    11ee:	cb 82       	std	Y+3, r12	; 0x03
    11f0:	fe 82       	std	Y+6, r15	; 0x06
    11f2:	ed 82       	std	Y+5, r14	; 0x05
    11f4:	89 87       	std	Y+9, r24	; 0x09
    11f6:	5d 98       	cbi	0x0b, 5	; 11
				reportp->ContactId = ContactId;
    11f8:	80 ed       	ldi	r24, 0xD0	; 208
				reportp->ScanTime = ScanTime;
    11fa:	97 e0       	ldi	r25, 0x07	; 7
    11fc:	90 93 1b 01 	sts	0x011B, r25
				reportp->X = X;
    1200:	80 93 1a 01 	sts	0x011A, r24
				reportp->Y = Y;
    1204:	8a e0       	ldi	r24, 0x0A	; 10
    1206:	90 e0       	ldi	r25, 0x00	; 0
    1208:	f5 01       	movw	r30, r10
				reportp->ContactCount = ContactCount;
				
				LEDs_TurnOnLEDs(LEDS_LED1);
				led1_ticks = LED_ON_TICKS;
    120a:	91 83       	std	Z+1, r25	; 0x01
    120c:	80 83       	st	Z, r24
    120e:	81 e0       	ldi	r24, 0x01	; 1
    1210:	0f c0       	rjmp	.+30     	; 0x1230 <CALLBACK_HID_Device_CreateHIDReport+0xf6>
    1212:	81 e0       	ldi	r24, 0x01	; 1
    1214:	88 83       	st	Y, r24
				reportp->ContactCount = 0;
				
				*ReportSize = 0;
				return false;
			}
			*ReportSize = sizeof(USB_SurfaceReport_Data_t);
    1216:	19 82       	std	Y+1, r1	; 0x01
    1218:	1a 82       	std	Y+2, r1	; 0x02
    121a:	18 86       	std	Y+8, r1	; 0x08
    121c:	1f 82       	std	Y+7, r1	; 0x07
    121e:	1c 82       	std	Y+4, r1	; 0x04
			return true;
    1220:	1b 82       	std	Y+3, r1	; 0x03
    1222:	1e 82       	std	Y+6, r1	; 0x06
				led1_ticks = LED_ON_TICKS;
			}
			else
			{
				
				reportp->ReportId = reportId;
    1224:	1d 82       	std	Y+5, r1	; 0x05
    1226:	19 86       	std	Y+9, r1	; 0x09
				reportp->TipSwitch = 0;
    1228:	f8 01       	movw	r30, r16
				reportp->ContactId = 0;
    122a:	11 82       	std	Z+1, r1	; 0x01
				reportp->ScanTime = 0;
    122c:	10 82       	st	Z, r1
    122e:	80 e0       	ldi	r24, 0x00	; 0
				reportp->X = 0;
    1230:	df 91       	pop	r29
    1232:	cf 91       	pop	r28
				reportp->Y = 0;
    1234:	1f 91       	pop	r17
    1236:	0f 91       	pop	r16
				reportp->ContactCount = 0;
    1238:	ff 90       	pop	r15
				
				*ReportSize = 0;
    123a:	ef 90       	pop	r14
    123c:	df 90       	pop	r13
    123e:	cf 90       	pop	r12
			*ReportSize = sizeof(USB_SurfaceReport_Data_t);
			return true;
		}
		*ReportSize = 0;
    }
    return false;
    1240:	bf 90       	pop	r11
}
    1242:	af 90       	pop	r10
    1244:	9f 90       	pop	r9
    1246:	8f 90       	pop	r8
    1248:	08 95       	ret

0000124a <CALLBACK_HID_Device_ProcessHIDReport>:
                                          const uint8_t ReportType,
                                          const void* ReportData,
                                          const uint16_t ReportSize)
{
    /* Not used but must be present */
}
    124a:	08 95       	ret

0000124c <__vector_23>:

/** ISR to manage the reception of data from the serial port, placing received bytes into a circular buffer
 *  for later transmission to the host.
 */
ISR(USART1_RX_vect, ISR_BLOCK)
{
    124c:	1f 92       	push	r1
    124e:	0f 92       	push	r0
    1250:	0f b6       	in	r0, 0x3f	; 63
    1252:	0f 92       	push	r0
    1254:	11 24       	eor	r1, r1
    1256:	2f 93       	push	r18
    1258:	8f 93       	push	r24
    125a:	9f 93       	push	r25
    125c:	ef 93       	push	r30
    125e:	ff 93       	push	r31
    uint8_t ReceivedByte = UDR1;
    1260:	80 91 ce 00 	lds	r24, 0x00CE

    if ((USB_DeviceState == DEVICE_STATE_Configured) &&
    1264:	90 91 20 01 	lds	r25, 0x0120
    1268:	94 30       	cpi	r25, 0x04	; 4
    126a:	31 f5       	brne	.+76     	; 0x12b8 <__vector_23+0x6c>
		 */
		static inline RingBuff_Count_t RingBuffer_GetCount(RingBuff_t* const Buffer)
		{
			RingBuff_Count_t Count;
			
			ATOMIC_BLOCK(ATOMIC_RESTORESTATE)
    126c:	2f b7       	in	r18, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
    126e:	f8 94       	cli
			{
				Count = Buffer->Count;
    1270:	90 91 b9 01 	lds	r25, 0x01B9
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
    1274:	2f bf       	out	0x3f, r18	; 63
    1276:	90 38       	cpi	r25, 0x80	; 128
    1278:	f9 f0       	breq	.+62     	; 0x12b8 <__vector_23+0x6c>
		 *  \param[in]     Data    Data element to insert into the buffer
		 */
		static inline void RingBuffer_Insert(RingBuff_t* const Buffer,
		                                     const RingBuff_Data_t Data)
		{
			*Buffer->In = Data;
    127a:	e0 91 b5 01 	lds	r30, 0x01B5
    127e:	f0 91 b6 01 	lds	r31, 0x01B6
    1282:	80 83       	st	Z, r24
			
			if (++Buffer->In == &Buffer->Buffer[BUFFER_SIZE])
    1284:	e0 91 b5 01 	lds	r30, 0x01B5
    1288:	f0 91 b6 01 	lds	r31, 0x01B6
    128c:	cf 01       	movw	r24, r30
    128e:	01 96       	adiw	r24, 0x01	; 1
    1290:	90 93 b6 01 	sts	0x01B6, r25
    1294:	80 93 b5 01 	sts	0x01B5, r24
    1298:	21 e0       	ldi	r18, 0x01	; 1
    129a:	85 3b       	cpi	r24, 0xB5	; 181
    129c:	92 07       	cpc	r25, r18
    129e:	21 f4       	brne	.+8      	; 0x12a8 <__vector_23+0x5c>
			  Buffer->In = Buffer->Buffer;
    12a0:	85 e3       	ldi	r24, 0x35	; 53
    12a2:	91 e0       	ldi	r25, 0x01	; 1
    12a4:	92 83       	std	Z+2, r25	; 0x02
    12a6:	81 83       	std	Z+1, r24	; 0x01

			ATOMIC_BLOCK(ATOMIC_RESTORESTATE)
    12a8:	9f b7       	in	r25, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
    12aa:	f8 94       	cli
			{
				Buffer->Count++;
    12ac:	80 91 b9 01 	lds	r24, 0x01B9
    12b0:	8f 5f       	subi	r24, 0xFF	; 255
    12b2:	80 93 b9 01 	sts	0x01B9, r24
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
    12b6:	9f bf       	out	0x3f, r25	; 63
	    !RingBuffer_IsFull(&USARTtoUSB_Buffer)) {
	RingBuffer_Insert(&USARTtoUSB_Buffer, ReceivedByte);
    }
}
    12b8:	ff 91       	pop	r31
    12ba:	ef 91       	pop	r30
    12bc:	9f 91       	pop	r25
    12be:	8f 91       	pop	r24
    12c0:	2f 91       	pop	r18
    12c2:	0f 90       	pop	r0
    12c4:	0f be       	out	0x3f, r0	; 63
    12c6:	0f 90       	pop	r0
    12c8:	1f 90       	pop	r1
    12ca:	18 95       	reti

000012cc <CALLBACK_USB_GetDescriptor>:
	const uint8_t  DescriptorNumber = (wValue & 0xFF);

	void*    Address = NULL;
	uint16_t Size    = NO_DESCRIPTOR;

	switch (DescriptorType)
    12cc:	93 30       	cpi	r25, 0x03	; 3
    12ce:	89 f0       	breq	.+34     	; 0x12f2 <CALLBACK_USB_GetDescriptor+0x26>
    12d0:	94 30       	cpi	r25, 0x04	; 4
    12d2:	28 f4       	brcc	.+10     	; 0x12de <CALLBACK_USB_GetDescriptor+0x12>
    12d4:	91 30       	cpi	r25, 0x01	; 1
    12d6:	49 f1       	breq	.+82     	; 0x132a <CALLBACK_USB_GetDescriptor+0x5e>
    12d8:	92 30       	cpi	r25, 0x02	; 2
    12da:	61 f5       	brne	.+88     	; 0x1334 <CALLBACK_USB_GetDescriptor+0x68>
    12dc:	05 c0       	rjmp	.+10     	; 0x12e8 <CALLBACK_USB_GetDescriptor+0x1c>
    12de:	91 32       	cpi	r25, 0x21	; 33
    12e0:	d1 f0       	breq	.+52     	; 0x1316 <CALLBACK_USB_GetDescriptor+0x4a>
    12e2:	92 32       	cpi	r25, 0x22	; 34
    12e4:	39 f5       	brne	.+78     	; 0x1334 <CALLBACK_USB_GetDescriptor+0x68>
    12e6:	1c c0       	rjmp	.+56     	; 0x1320 <CALLBACK_USB_GetDescriptor+0x54>
			Address = &DeviceDescriptor;
			Size    = sizeof(USB_Descriptor_Device_t);
			break;
		case DTYPE_Configuration:
			Address = &ConfigurationDescriptor;
			Size    = sizeof(USB_Descriptor_Configuration_t);
    12e8:	82 e2       	ldi	r24, 0x22	; 34
    12ea:	90 e0       	ldi	r25, 0x00	; 0
		case DTYPE_Device:
			Address = &DeviceDescriptor;
			Size    = sizeof(USB_Descriptor_Device_t);
			break;
		case DTYPE_Configuration:
			Address = &ConfigurationDescriptor;
    12ec:	e4 eb       	ldi	r30, 0xB4	; 180
    12ee:	f1 e0       	ldi	r31, 0x01	; 1
			Size    = sizeof(USB_Descriptor_Configuration_t);
			break;
    12f0:	25 c0       	rjmp	.+74     	; 0x133c <CALLBACK_USB_GetDescriptor+0x70>
		case DTYPE_String:
			switch (DescriptorNumber)
    12f2:	81 30       	cpi	r24, 0x01	; 1
    12f4:	41 f0       	breq	.+16     	; 0x1306 <CALLBACK_USB_GetDescriptor+0x3a>
    12f6:	81 30       	cpi	r24, 0x01	; 1
    12f8:	18 f0       	brcs	.+6      	; 0x1300 <CALLBACK_USB_GetDescriptor+0x34>
    12fa:	82 30       	cpi	r24, 0x02	; 2
    12fc:	d9 f4       	brne	.+54     	; 0x1334 <CALLBACK_USB_GetDescriptor+0x68>
    12fe:	06 c0       	rjmp	.+12     	; 0x130c <CALLBACK_USB_GetDescriptor+0x40>
			{
				case 0x00:
					Address = &LanguageString;
					Size    = pgm_read_byte(&LanguageString.Header.Size);
    1300:	e0 eb       	ldi	r30, 0xB0	; 176
    1302:	f1 e0       	ldi	r31, 0x01	; 1
    1304:	05 c0       	rjmp	.+10     	; 0x1310 <CALLBACK_USB_GetDescriptor+0x44>
					break;
				case 0x01:
					Address = &ManufacturerString;
					Size    = pgm_read_byte(&ManufacturerString.Header.Size);
    1306:	e2 ea       	ldi	r30, 0xA2	; 162
    1308:	f1 e0       	ldi	r31, 0x01	; 1
    130a:	02 c0       	rjmp	.+4      	; 0x1310 <CALLBACK_USB_GetDescriptor+0x44>
					break;
				case 0x02:
					Address = &ProductString;
					Size    = pgm_read_byte(&ProductString.Header.Size);
    130c:	e4 e7       	ldi	r30, 0x74	; 116
    130e:	f1 e0       	ldi	r31, 0x01	; 1
    1310:	84 91       	lpm	r24, Z
    1312:	90 e0       	ldi	r25, 0x00	; 0
					break;
    1314:	13 c0       	rjmp	.+38     	; 0x133c <CALLBACK_USB_GetDescriptor+0x70>
			}
			
			break;
		case HID_DTYPE_HID: 
			Address = (void*)&ConfigurationDescriptor.HID_SurfaceHID;
			Size    = sizeof(USB_HID_Descriptor_HID_t);
    1316:	89 e0       	ldi	r24, 0x09	; 9
    1318:	90 e0       	ldi	r25, 0x00	; 0
					break;
			}
			
			break;
		case HID_DTYPE_HID: 
			Address = (void*)&ConfigurationDescriptor.HID_SurfaceHID;
    131a:	e6 ec       	ldi	r30, 0xC6	; 198
    131c:	f1 e0       	ldi	r31, 0x01	; 1
			Size    = sizeof(USB_HID_Descriptor_HID_t);
			break;
    131e:	0e c0       	rjmp	.+28     	; 0x133c <CALLBACK_USB_GetDescriptor+0x70>
		case HID_DTYPE_Report: 
			Address = &SurfaceReport;
			Size    = sizeof(SurfaceReport);
    1320:	85 e8       	ldi	r24, 0x85	; 133
    1322:	90 e0       	ldi	r25, 0x00	; 0
		case HID_DTYPE_HID: 
			Address = (void*)&ConfigurationDescriptor.HID_SurfaceHID;
			Size    = sizeof(USB_HID_Descriptor_HID_t);
			break;
		case HID_DTYPE_Report: 
			Address = &SurfaceReport;
    1324:	e8 ee       	ldi	r30, 0xE8	; 232
    1326:	f1 e0       	ldi	r31, 0x01	; 1
			Size    = sizeof(SurfaceReport);
			break;
    1328:	09 c0       	rjmp	.+18     	; 0x133c <CALLBACK_USB_GetDescriptor+0x70>

	switch (DescriptorType)
	{
		case DTYPE_Device:
			Address = &DeviceDescriptor;
			Size    = sizeof(USB_Descriptor_Device_t);
    132a:	82 e1       	ldi	r24, 0x12	; 18
    132c:	90 e0       	ldi	r25, 0x00	; 0
	uint16_t Size    = NO_DESCRIPTOR;

	switch (DescriptorType)
	{
		case DTYPE_Device:
			Address = &DeviceDescriptor;
    132e:	e6 ed       	ldi	r30, 0xD6	; 214
    1330:	f1 e0       	ldi	r31, 0x01	; 1
    1332:	04 c0       	rjmp	.+8      	; 0x133c <CALLBACK_USB_GetDescriptor+0x70>
{
	const uint8_t  DescriptorType   = (wValue >> 8);
	const uint8_t  DescriptorNumber = (wValue & 0xFF);

	void*    Address = NULL;
	uint16_t Size    = NO_DESCRIPTOR;
    1334:	80 e0       	ldi	r24, 0x00	; 0
    1336:	90 e0       	ldi	r25, 0x00	; 0
                                    const void** const DescriptorAddress)
{
	const uint8_t  DescriptorType   = (wValue >> 8);
	const uint8_t  DescriptorNumber = (wValue & 0xFF);

	void*    Address = NULL;
    1338:	e0 e0       	ldi	r30, 0x00	; 0
    133a:	f0 e0       	ldi	r31, 0x00	; 0
			Size    = sizeof(TouchBlob);
			break;
			*/
	}
	
	*DescriptorAddress = Address;		
    133c:	da 01       	movw	r26, r20
    133e:	11 96       	adiw	r26, 0x01	; 1
    1340:	fc 93       	st	X, r31
    1342:	ee 93       	st	-X, r30
	return Size;
}
    1344:	08 95       	ret

00001346 <memcmp>:
    1346:	fb 01       	movw	r30, r22
    1348:	dc 01       	movw	r26, r24
    134a:	04 c0       	rjmp	.+8      	; 0x1354 <memcmp+0xe>
    134c:	8d 91       	ld	r24, X+
    134e:	01 90       	ld	r0, Z+
    1350:	80 19       	sub	r24, r0
    1352:	21 f4       	brne	.+8      	; 0x135c <memcmp+0x16>
    1354:	41 50       	subi	r20, 0x01	; 1
    1356:	50 40       	sbci	r21, 0x00	; 0
    1358:	c8 f7       	brcc	.-14     	; 0x134c <memcmp+0x6>
    135a:	88 1b       	sub	r24, r24
    135c:	99 0b       	sbc	r25, r25
    135e:	08 95       	ret

00001360 <memcpy>:
    1360:	fb 01       	movw	r30, r22
    1362:	dc 01       	movw	r26, r24
    1364:	02 c0       	rjmp	.+4      	; 0x136a <memcpy+0xa>
    1366:	01 90       	ld	r0, Z+
    1368:	0d 92       	st	X+, r0
    136a:	41 50       	subi	r20, 0x01	; 1
    136c:	50 40       	sbci	r21, 0x00	; 0
    136e:	d8 f7       	brcc	.-10     	; 0x1366 <memcpy+0x6>
    1370:	08 95       	ret

00001372 <memset>:
    1372:	dc 01       	movw	r26, r24
    1374:	01 c0       	rjmp	.+2      	; 0x1378 <memset+0x6>
    1376:	6d 93       	st	X+, r22
    1378:	41 50       	subi	r20, 0x01	; 1
    137a:	50 40       	sbci	r21, 0x00	; 0
    137c:	e0 f7       	brcc	.-8      	; 0x1376 <memset+0x4>
    137e:	08 95       	ret

00001380 <_exit>:
    1380:	f8 94       	cli

00001382 <__stop_program>:
    1382:	ff cf       	rjmp	.-2      	; 0x1382 <__stop_program>
